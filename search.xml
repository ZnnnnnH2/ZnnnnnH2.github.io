<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ics-05_learned</title>
      <link href="/2025/08/03/ics-05-learned/"/>
      <url>/2025/08/03/ics-05-learned/</url>
      
        <content type="html"><![CDATA[<p>观察到<code>page</code>是一个可控的post参数，通过<code>/index.php?page=php://filter/read=convert.base64-encode/resource=index.php</code>可以读取到<code>index.php</code>的内容。</p><p><code>ctype_alnum($page)</code>函数用于检测字符串是否只由字母和数字组成，因此可以用来对<code>page</code>参数进行初步的安全检查。</p><p><code>strpos($page, &#39;input&#39;) &gt; 0</code>函数用于检查<code>page</code>参数中是否包含字符串<code>input</code>出现的第一个匹配的位置，如果存在则返回匹配的位置，否则返回<code>false</code>。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web_php_include_learned</title>
      <link href="/2025/08/02/Web-php-include-learned/"/>
      <url>/2025/08/02/Web-php-include-learned/</url>
      
        <content type="html"><![CDATA[<p><strong>源代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="variable">$page</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$page</span>, <span class="string">&quot;php://&quot;</span>)) &#123;</span><br><span class="line">    <span class="variable">$page</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php://&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$page</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$page</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CHOICE-1"><a href="#CHOICE-1" class="headerlink" title="CHOICE 1"></a>CHOICE 1</h1><h2 id="strstr"><a href="#strstr" class="headerlink" title="strstr"></a>strstr</h2><p>The <code>strstr()</code> function in PHP is used to find the first occurrence of a string inside another string. Here’s how it works:</p><h3 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">strstr</span>(haystack, needle, before_needle)</span><br></pre></td></tr></table></figure><blockquote><p><strong>Parameters:</strong></p><ul><li><code>haystack</code> - The string to search in</li><li><code>needle</code> - The string to search for</li><li><code>before_needle</code> (optional) - If TRUE, returns the part before the first occurrence</li></ul><p><strong>Return Value:</strong></p><ul><li>Returns the portion of the string from the first occurrence of <code>needle</code> to the end</li><li>Returns <code>FALSE</code> if <code>needle</code> is not found</li></ul><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p><strong>Basic usage:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$email</span> = <span class="string">&quot;user@example.com&quot;</span>;</span><br><span class="line"><span class="variable">$domain</span> = <span class="title function_ invoke__">strstr</span>(<span class="variable">$email</span>, <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$domain</span>; <span class="comment">// Output: @example.com</span></span><br></pre></td></tr></table></figure><p><strong>Get part before the needle:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$email</span> = <span class="string">&quot;user@example.com&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="title function_ invoke__">strstr</span>(<span class="variable">$email</span>, <span class="string">&#x27;@&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$username</span>; <span class="comment">// Output: user</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="str-replace-过滤替换"><a href="#str-replace-过滤替换" class="headerlink" title="str_replace 过滤替换"></a>str_replace 过滤替换</h2><p>使用大写<code>PHP://</code>替换小写或使用<code>phpphp:////</code>拼接（双写绕过但源码有循环防御）。</p><h3 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h3><p><code>php://input</code> 是一个只读流，用于获取原始 POST 数据。它可以用于接收 JSON 或 XML 格式的数据，而不需要解析表单数据。</p><p>通过 <code>php://input</code> 获得 post 数据然后 <code>include()</code> 执行该数据，可以执行想要的恶意代码。</p><p>postman 中 post 模式，headers 选择 <code>Content-Type</code> 为 <code>application/x-www-form-urlencoded</code>，body 中选择 raw，输入<code>system(&#39;ls)</code>。</p><p>获取目录文件-&gt;输出文件</p><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><h3 id="data"><a href="#data" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h3>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化练习</title>
      <link href="/2025/08/01/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%83%E4%B9%A0/"/>
      <url>/2025/08/01/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>如何把其他文件输出 highlight_file(‘flag.php’);</p><p>最简单的反序列化</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>最简单的反序列化</p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mylogin</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">   <span class="keyword">var</span> <span class="variable">$pass</span>;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>,<span class="variable">$pass</span></span>)</span>&#123;</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;pass=<span class="variable">$pass</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;user==<span class="string">&quot;daydream&quot;</span> <span class="keyword">and</span> <span class="variable language_">$this</span>-&gt;pass==<span class="string">&quot;ok&quot;</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;param&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">login</span>())</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>urlencode</p><ol><li>在收到请求时，PHP 内部会 <strong>自动对 Cookie 做一次百分号解码（percent-decode）</strong>，再把结果填进 <code>$_COOKIE</code> 超全局，所以脚本里看到的已经是“还原好”的字符串。</li></ol></li><li><p>PHP 对 <code>$_GET</code> &#x2F; <code>$_POST</code> 也会先做同样的解码（只是 <code>+</code> 在 query string 会变空格）；保持行为一致更易理解。</p></li></ol><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">                <span class="title function_ invoke__">unserialize</span>(<span class="variable">$this</span>-&gt;key)();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetFlag</span></span></span><br><span class="line"><span class="class"></span>&#123;       <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$action</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$a</span>=<span class="variable language_">$this</span>-&gt;action;</span><br><span class="line">            <span class="variable">$a</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]);</span><br></pre></td></tr></table></figure><ol><li><p><code>creat_function()</code>: <code>create_function(string $args, string $code): string</code>. 它内部会 <code>eval(&quot;function ($args) &#123; $code &#125;&quot;)</code> —— <strong>在创建时就执行 <code>eval</code></strong>。</p><ol><li>将<code>$code</code>的首字符设为<code>&#125;</code>，这是经典的 <strong><code>create_function</code> 注入技巧</strong>：<ul><li><code>create_function(&#39;&#39;, &#39;…代码…&#39;)</code> 会拼成：<code>function () &#123; …代码… &#125;</code></li><li>你把 <code>code</code> 设为 <code>&quot;&#125;...;//&quot;</code>，<strong>先闭合</strong>函数体，然后插入任意 PHP 语句，最后用注释吞掉尾巴。</li></ul></li></ol></li><li><p>PHP 7+ 允许对“数组型 callable（<code>[$obj,&#39;method&#39;]</code>）”直接用 <code>()</code> 调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hello, <span class="subst">$name</span>\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$d</span>   = <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"><span class="variable">$cb</span>  = [<span class="variable">$d</span>, <span class="string">&#x27;hi&#x27;</span>];       <span class="comment">// 数组型 callable</span></span><br><span class="line"><span class="variable">$arg</span> = <span class="string">&#x27;Peter&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1) 传统</span></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$cb</span>, <span class="variable">$arg</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2) PHP 7+ 直接调用</span></span><br><span class="line"><span class="variable">$cb</span>(<span class="variable">$arg</span>);               <span class="comment">// 也可写 ($cb)($arg);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3) 本质等同于</span></span><br><span class="line"><span class="variable">$d</span>-&gt;<span class="title function_ invoke__">hi</span>(<span class="variable">$arg</span>);            <span class="comment">// 直接方法调用</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;construct&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include_once</span>(<span class="variable language_">$this</span>-&gt;file);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;destruct&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wakeup&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">show_source</span>(<span class="string">&#x27;index.php&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Are you daydreaming?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>序列格式化过滤绕过：<ol><li>在<code>preg_match(&#39;/[oc]:\d+:/i&#39;,$cmd</code>中，在数字前面加上<code>+</code>，<code>O:+6:&quot;secret&quot;:2:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</code>.</li><li>在 PHP 的序列化语法 里，所有用数字表示长度或数量的字段其实都被当成 “C-风格整数” 来解析——也就是说，前面出现一个 + 或 - 号，unserialize() 仍会把它正确地转换成整数值。“+” 不会改变实际长度校验。</li></ol></li><li>CVE-2016-7124 漏洞：<ol><li>PHP 5.6.0 – 5.6.24 和 7.0.0 – 7.0.9 在执行 unserialize() 时，如果反序列化过程 途中失败（典型场景：属性数量与真实不符、循环引用解析出错等），就会提早返回而 不再调用 <strong>wakeup()——但此时对象已经被创建进内存并最终会被析构，从而触发</strong>destruct()。依赖 __wakeup() 做安全检查、权限校验、属性清理的应用会被绕过，导致 任意魔术方法调用、远程代码执行或拒绝服务。</li></ol></li></ol><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$comm</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$com</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;comm = <span class="variable">$com</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;comm;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;comm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>];</span><br><span class="line"><span class="variable">$param</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;%&quot;</span>,<span class="string">&quot;daydream&quot;</span>,<span class="variable">$param</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$param</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$param</span>);</span><br></pre></td></tr></table></figure><ol><li><code>private</code>属性：<ol><li>特别的， 当一个变量为私有变量时， 序列化之后会在变量名的头部添加\00 类名\00， 由于\00 不可见， 显示在页面上就是类名+变量名， 但是该名称的长度依然计算两个\00， 所以在实际场景中，需要注意长度和名称是否匹配。</li><li>如果变量为 protected， 会在变量名的头部添加\00*\00。</li><li>使用 urlencode()可以引入\00，或者使用 burpsuite 的<code>URL编码</code>功能（%00）（未验证）。</li></ol></li></ol><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">you</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$body</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pro</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$project</span>=<span class="variable language_">$this</span>-&gt;pro;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;body-&gt;<span class="variable">$project</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">my</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$func</span> == <span class="string">&#x27;yourname&#x27;</span> <span class="keyword">and</span> <span class="variable language_">$this</span>-&gt;name == <span class="string">&#x27;myname&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><ol><li><code>__call($func, $args)</code> 魔术方法：<ol><li>当调用一个不可访问的对象方法时，PHP 会自动调用 <code>__call()</code> 方法。</li><li><code>__call()</code> 接受两个参数：方法名和参数数组。</li><li>例如：<code>$obj-&gt;method($arg1, $arg2)</code> 会触发 <code>$obj-&gt;__call(&#39;method&#39;, [$arg1, $arg2])</code></li></ol></li></ol><h2 id="8-字符串缩短-增长逃逸"><a href="#8-字符串缩短-增长逃逸" class="headerlink" title="8 字符串缩短&#x2F;增长逃逸"></a>8 字符串缩短&#x2F;增长逃逸</h2><p>为什么不直接用</p><blockquote><p><code>var $pass=&#39;escaping&#39;;</code></p></blockquote><p>F12 控制台可见</p><h2 id="9-嵌套构造"><a href="#9-嵌套构造" class="headerlink" title="9 嵌套构造"></a>9 嵌套构造</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确定<code>modifier-&gt;var</code>需要为<code>flag.php</code>-&gt;通过<code>__invoke()</code>-&gt;<code>__get()</code>方法调用-&gt;<code>to_string()</code>-&gt;<code>__wakeup()</code></p><h2 id="10-SOAP"><a href="#10-SOAP" class="headerlink" title="10 SOAP"></a>10 SOAP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$c</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>]);</span><br><span class="line"><span class="variable">$c</span> -&gt; <span class="title function_ invoke__">daydream</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">In this topic,it is of course possible to pass parameters directly to flag.php, but it is not recommended to use this method to learn SOAP.</span></span><br><span class="line"><span class="comment">flag.php</span></span><br><span class="line"><span class="comment">$flag=&quot;*&quot;;</span></span><br><span class="line"><span class="comment">$user=$_SERVER[&#x27;HTTP_USER_AGENT&#x27;];</span></span><br><span class="line"><span class="comment">$pass = $_POST[&#x27;pass&#x27;];</span></span><br><span class="line"><span class="comment">if(isset($pass) and isset($user))&#123;</span></span><br><span class="line"><span class="comment">    if($pass==&#x27;password&#x27; and $user==&#x27;admin&#x27;)&#123;</span></span><br><span class="line"><span class="comment">        file_put_contents(&#x27;flag.txt&#x27;,$flag);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>基础的SOAP练习，通过反序列化一个内置的类<code>SoapClient</code>实现攻击。调用本地不存在的方法时，SoapClient 会将 HTTP 请求发送到您指定的位置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>, [</span><br><span class="line">    <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://example.com/service&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&#x27;myNamespace&#x27;</span></span><br><span class="line">]);</span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="title function_ invoke__">daydream</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将发送</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/service</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>example.com</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/xml; charset=utf-8</span><br><span class="line"><span class="attribute">SOAPAction</span><span class="punctuation">: </span>&quot;myNamespace#daydream&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>其中有一个参数<code>user_agent</code>，可以通过<code>\r\n</code>截断从而增加参数。</p><p>值得注意的是，在高版本的 PHP 中，类<code>SoapClient</code>的<code>uri</code>是private的，而低版本是public的。这会导致不同版本序列化生成的字符串不同导致<code>Fatal error: Uncaught SoapFault exception: [Client] Error finding &quot;uri&quot; property</code>报错。</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas 基础</title>
      <link href="/2025/07/26/pandas/"/>
      <url>/2025/07/26/pandas/</url>
      
        <content type="html"><![CDATA[<h1 id="pandas-2-Pandas-I-from-Spring-2025-–-Principles-and-Techniques-of-Data-Science"><a href="#pandas-2-Pandas-I-from-Spring-2025-–-Principles-and-Techniques-of-Data-Science" class="headerlink" title="pandas [[2  Pandas I (from Spring 2025) – Principles and Techniques of Data Science]]"></a>pandas [[2  Pandas I (from Spring 2025) – Principles and Techniques of Data Science]]</h1><h2 id="how-datas-are-organized"><a href="#how-datas-are-organized" class="headerlink" title="how datas are organized"></a>how datas are organized</h2><p>see table as DataFrame, and each column as a Series</p><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><ul><li>a sequence of values of same type</li><li>a sequence of data labels called index</li></ul><h4 id="Selection-in-Series"><a href="#Selection-in-Series" class="headerlink" title="Selection in Series"></a>Selection in Series</h4><ul><li>by a single label or a list of labels: <code>s[[labels]]</code></li><li>by a filtering condition: <code>s[s &gt; 0]</code></li></ul><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><h4 id="where-the-data-of-DataFrame-comes-from"><a href="#where-the-data-of-DataFrame-comes-from" class="headerlink" title="where the data of DataFrame comes from"></a>where the data of DataFrame comes from</h4><ul><li>csv file: <code>pd.read_csv(&#39;file.csv&#39;, index_col = &#39;year&#39;)</code></li><li>using a list: <code>pd.DataFrame([[1, 2], [3, 4]], columns=[&#39;A&#39;, &#39;B&#39;], index=[&#39;a&#39;, &#39;b&#39;])</code></li><li>using a dictionary: <code>pd.DataFrame(&#123;&#39;A&#39;: [1, 2], &#39;B&#39;: [3, 4]&#125;, index=[&#39;a&#39;, &#39;b&#39;])</code></li><li>using a Series:</li></ul><h4 id="about-index"><a href="#about-index" class="headerlink" title="about index"></a>about index</h4><ul><li>index can also have a name</li><li>do not have to be unique</li><li>These indices are the arbitrary numerical indices generated when we created the <code>DataFrame</code>. For example, <code>banana</code> was originally in row 2, and so it has row label 2. Note the distinction between the index <code>_label_</code>, and the actual index <code>_position_</code>.</li><li>can be set to specific column using <code>df.set_index(&lt;column&gt;)</code></li><li>can be reset to default using <code>df.reset_index()</code></li></ul><h4 id="DataFrame-API"><a href="#DataFrame-API" class="headerlink" title="DataFrame API"></a>DataFrame API</h4><p><a href="**%5Bhttps://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html%5D(https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)**">API doc</a></p><ul><li><code>idxmax()</code> function returns the index of the first occurrence of the maximum value in a Series or DataFrame.</li><li><code>drop_duplicates()</code> function removes duplicate rows from a DataFrame.</li></ul><h4 id="Data-extraction"><a href="#Data-extraction" class="headerlink" title="Data extraction"></a>Data extraction</h4><ul><li><code>df.head(&lt;n&gt;)</code></li><li><code>df.tail(&lt;n&gt;)</code></li><li><code>df.loc[&lt;row_index&gt;, &lt;column_name&gt;]</code><ul><li>Note that if we request a single column but don’t enclose it in a list, the return type of the <code>loc</code> operator is a <code>Series</code> rather than a <code>DataFrame</code></li><li><strong>reminder: a:b means [a,b]</strong></li></ul></li><li><code>df.iloc[&lt;row_integers&gt;, &lt;column_integers&gt;]</code></li><li><code>[]</code><ul><li>a slice of rows: <code>df[&lt;row_slice&gt;]</code></li><li>a list of column labels</li><li>a single column label</li><li><strong>reminder: a:b means [a,b)</strong></li><li>Note that slicing notation is not supported for columns if you use <code>[]</code> notation. Use <code>loc</code> instead.</li></ul></li></ul><h5 id="Boolean-Array-Input"><a href="#Boolean-Array-Input" class="headerlink" title="Boolean Array Input"></a>Boolean Array Input</h5><ul><li><code>.loc</code> and <code>[]</code> can take a boolean array as input</li></ul><h5 id="Boolean-choose"><a href="#Boolean-choose" class="headerlink" title="Boolean choose"></a>Boolean choose</h5><ul><li><code>df[df[&#39;column&#39;] &gt; 0]</code> returns rows where the value in ‘column’ is greater than 0</li><li><code>df[df[&#39;column&#39;].isin([1, 2, 3])]</code> returns rows where the value in ‘column’ is in the list <code>[1, 2, 3]</code></li><li><code>df[df[&#39;column&#39;].str.contains(&#39;pattern&#39;)]</code> returns rows where the value in ‘column’ contains the substring ‘pattern’</li></ul><h4 id="operations-on-DataFrame"><a href="#operations-on-DataFrame" class="headerlink" title="operations on DataFrame"></a>operations on DataFrame</h4><h5 id="add-modify-columns"><a href="#add-modify-columns" class="headerlink" title="add&#x2F;modify columns"></a>add&#x2F;modify columns</h5><ul><li>using <code>[]</code> to add a new column: <code>df[&#39;new_column&#39;] = [1, 2, 3]</code></li></ul><h5 id="rename-columns"><a href="#rename-columns" class="headerlink" title="rename columns"></a>rename columns</h5><ul><li>using <code>rename</code>: <code>df.rename(columns=&#123;&#39;old_name&#39;: &#39;new_name&#39;&#125;, inplace=True)</code></li></ul><h5 id="delete-columns"><a href="#delete-columns" class="headerlink" title="delete columns"></a>delete columns</h5><ul><li>using <code>drop</code>: <code>df.drop(columns=[&#39;column_to_delete&#39;], inplace=True)</code><ul><li>By default, <code>drop</code> does not modify the DataFrame in place, so you need to set <code>inplace=True</code> to apply the changes directly to the original DataFrame, or just assign the result to a new variable.</li></ul></li></ul><h4 id="useful-methods"><a href="#useful-methods" class="headerlink" title="useful methods"></a>useful methods</h4><ul><li>suport a range of methods from <code>numpy</code>, as long as the type is int.</li><li><code>size/shape</code></li><li><code>describe</code>: return a description of DataFrame</li><li><code>sample</code>: randomly select rows, replace can be set</li><li><code>value_counts</code>: return counts of unique values</li><li><code>sort_values</code>: sort by column values</li><li><code>unique</code>: return unique values</li></ul><h4 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h4><h5 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h5><p>Group data by one or more columns and perform aggregate operations on the grouped data.</p><h5 id="GroupBy"><a href="#GroupBy" class="headerlink" title="GroupBy"></a>GroupBy</h5><p>groupby generates a GroupBy object</p><p>we can’t work with GroupBy object directly, we need to apply an aggregation function(to reduce the dimension of table)(a function that aggregates several values into one summary value) to it.<br><code>grouped = df.groupby(&#39;column_name&#39;).agg(&#123;&#39;other_column&#39;: &#39;sum&#39;&#125;)</code></p><p>the column we grouped on will become the index</p><h6 id="Filtering-by-Group"><a href="#Filtering-by-Group" class="headerlink" title="Filtering by Group"></a><strong>Filtering by Group</strong></h6><p>it takes a function that returns true or false for each sub-DataFrame, where <code>True</code> means the group should be kept.</p><h6 id="look-into-DataFrame-groupby-ways"><a href="#look-into-DataFrame-groupby-ways" class="headerlink" title="look into DataFrame.groupby ways"></a><strong>look into DataFrame.groupby ways</strong></h6><p><code>grouped.groups()</code><br><code>grouped.get_group(&#39;group_name&#39;)</code></p><h6 id="Grouping-by-Multiple-Columns"><a href="#Grouping-by-Multiple-Columns" class="headerlink" title="Grouping by Multiple Columns"></a><strong>Grouping by Multiple Columns</strong></h6><ol><li>using a list of column names: <code>df.groupby([&#39;col1&#39;, &#39;col2&#39;])</code></li><li>using Pivot Table</li></ol><ul><li><code>index</code>: the column(s) to group by</li><li><code>columns</code>: the column(s) to pivot</li><li><code>values</code>: the column(s) to aggregate</li><li><code>aggfunc</code>: the aggregation function to apply</li></ul><h4 id="Joining-DataFrames"><a href="#Joining-DataFrames" class="headerlink" title="Joining DataFrames"></a>Joining DataFrames</h4>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> data_science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/07/25/hello-world/"/>
      <url>/2025/07/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
